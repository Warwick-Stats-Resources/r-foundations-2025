[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "This course is taking place in Term 1, 2025.\nIt takes place in weeks 2, 4 and 6, on Thursdays and Fridays, from 12:30-14:00.\n\n\n\nWeek\nDate\nContent\n\n\n\n\n2\nThursday October 16th\nIntroduction to R and RStudio\n\n\n2\nFriday October 17th\nData Types, Structures and Wrangling\n\n\n4\nThursday October 30th\nProgramming in R\n\n\n4\nFriday October 31st\nSimulation and Optimisation\n\n\n6\nThursday November 13th\nGraphics\n\n\n6\nFriday November 14th\nQuarto"
  },
  {
    "objectID": "content/04-sim-optim/index.html",
    "href": "content/04-sim-optim/index.html",
    "title": "Simulation and optimisation",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/04-sim-optim/index.html#slides",
    "href": "content/04-sim-optim/index.html#slides",
    "title": "Simulation and optimisation",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/04-sim-optim/index.html#resources",
    "href": "content/04-sim-optim/index.html#resources",
    "title": "Simulation and optimisation",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nDavid Goldberg (1991), “What Every Computer Scientist Should Know About Floating-Point Arithmetic”, ACM Computing Surveys, 23/1, 5–48\nhttps://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html.\nRuth Ripley’s numerical considerations notes for APTS 2013\nhttps://portal.stats.ox.ac.uk/userdata/ruth/APTS2013/Numerics.pdf"
  },
  {
    "objectID": "content/06-quarto/index.html",
    "href": "content/06-quarto/index.html",
    "title": "Quarto",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/06-quarto/index.html#slides",
    "href": "content/06-quarto/index.html#slides",
    "title": "Quarto",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/06-quarto/index.html#resources",
    "href": "content/06-quarto/index.html#resources",
    "title": "Quarto",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nhttps://quarto.org: The official documentation\nAwesome Quarto: A curated list of Quarto talks, tools, examples & articles\nBeautiful Reports and Persentations with Quarto\nGetting Started with Quarto workshop website\nQuarto for R and RStudio workshop"
  },
  {
    "objectID": "content/02-data-wrangling/index.html",
    "href": "content/02-data-wrangling/index.html",
    "title": "Data types, stuctures, and wrangling",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/02-data-wrangling/index.html#slides",
    "href": "content/02-data-wrangling/index.html#slides",
    "title": "Data types, stuctures, and wrangling",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/02-data-wrangling/index.html#resources",
    "href": "content/02-data-wrangling/index.html#resources",
    "title": "Data types, stuctures, and wrangling",
    "section": "Resources",
    "text": "Resources\n\nR and RStudio\n\nRStudio cheatsheets\ndplyr cheatsheet\nR for data science book\n\n\n\nPackages\n\ndplyr\nhttps://dplyr.tidyverse.org\nforcats\nhttps://forcats.tidyverse.org\nferriswheels\nhttps://github.com/EmilHvitfeldt/ferriswheels\nhere\nhttps://here.r-lib.org"
  },
  {
    "objectID": "slides/03-programming/index.html#overview",
    "href": "slides/03-programming/index.html#overview",
    "title": "Programming in R",
    "section": "Overview",
    "text": "Overview\n\nMore on data structures\nControl flow and iteration functions\nEfficient R programming\nWriting functions (basics)"
  },
  {
    "objectID": "slides/03-programming/index.html#introduction",
    "href": "slides/03-programming/index.html#introduction",
    "title": "Programming in R",
    "section": "Introduction",
    "text": "Introduction\nUnderstanding the basics of R programming helps to improve analysis/reporting scripts and extend what we can do with R.\nGood coding practice follows the DRY principle: Don’t Repeat Yourself. Rather than modifying copy-pasted code chunks, we might\n\nwrite a custom function\nuse loops or iteration functions to perform multiple similar tasks\n\nCustom functions can be used to provide convenient wrappers to complex code chunks as well as implement novel functionality."
  },
  {
    "objectID": "slides/03-programming/index.html#data-structures-revisited",
    "href": "slides/03-programming/index.html#data-structures-revisited",
    "title": "Programming in R",
    "section": "Data structures revisited",
    "text": "Data structures revisited\nFor basic data analysis, our data is usually imported and we use high-level functions (e.g. from dplyr) to handle it.\nFor programming, we need to work with lower-level data structures and be able to\n\ncreate basic objects\nextract components\ncoerce one data type to another\n\nWorking with base R functions when programming also helps avoid dependencies, which is useful when writing packages."
  },
  {
    "objectID": "slides/03-programming/index.html#vectors",
    "href": "slides/03-programming/index.html#vectors",
    "title": "Programming in R",
    "section": "Vectors",
    "text": "Vectors\nnumeric(), character() and logical() can be used to initialize vectors of the corresponding type for a given length\n\nx &lt;- numeric(3)\nx\n\n[1] 0 0 0\n\n\nElements can be assigned by indexing the positions to be filled, e.g.\n\nx[1] &lt;- 4 # assign 4 to 1st element\nx[-c(2, 3)] &lt;- 4 # assign 4 to everying *except* 2nd and 3rd element\n\nThis is particularly useful when programming an iterative procedure.\nas.logical(), as.numeric() and as.character() coerce to the corresponding type, producing NAs if coercion fails."
  },
  {
    "objectID": "slides/03-programming/index.html#logical-vectors",
    "href": "slides/03-programming/index.html#logical-vectors",
    "title": "Programming in R",
    "section": "Logical vectors",
    "text": "Logical vectors\nLogical vectors are commonly used when indexing. The vector might be produced by a logical operator:\n\nx &lt;- c(1, 1, 2, 2, 2)\nx &gt; 1\n\n[1] FALSE FALSE  TRUE  TRUE  TRUE\n\nx[x &gt; 1]\n\n[1] 2 2 2\n\n\nduplicated() is also useful here:\n\nduplicated(x)\n\n[1] FALSE  TRUE FALSE  TRUE  TRUE\n\n!duplicated(x)\n\n[1]  TRUE FALSE  TRUE FALSE FALSE"
  },
  {
    "objectID": "slides/03-programming/index.html#numeric-vectors",
    "href": "slides/03-programming/index.html#numeric-vectors",
    "title": "Programming in R",
    "section": "Numeric vectors",
    "text": "Numeric vectors\nThe are several convenience function for creating numeric vectors, notably seq() and rep().\nAs they are so useful there are fast shortcuts for particular cases\n\nseq_len(4)\n\n[1] 1 2 3 4\n\nfruits &lt;- c(\"apple\", \"pear\", \"banana\")\nseq_along(fruits) # a sequence from 1 to the length of x\n\n[1] 1 2 3\n\nrep.int(1:2, times = c(2, 3))\n\n[1] 1 1 2 2 2"
  },
  {
    "objectID": "slides/03-programming/index.html#character-vectors",
    "href": "slides/03-programming/index.html#character-vectors",
    "title": "Programming in R",
    "section": "Character vectors",
    "text": "Character vectors\nCharacter vectors may be used for creating names\n\nx &lt;- 3:5\nnames(x) &lt;- paste0(LETTERS[1:3], 1229:1231)\nx\n\nA1229 B1230 C1231 \n    3     4     5 \n\nnames(x)\n\n[1] \"A1229\" \"B1230\" \"C1231\"\n\n\nNames can be used as an alternative to numeric or logical vectors when indexing\n\nx[\"B1230\"]\n\nB1230 \n    4"
  },
  {
    "objectID": "slides/03-programming/index.html#matrices",
    "href": "slides/03-programming/index.html#matrices",
    "title": "Programming in R",
    "section": "Matrices",
    "text": "Matrices\nA matrix is in fact also a vector, with an attribute giving the dimensions of the matrix\n\ndefaultbyrow\n\n\n\nM &lt;- matrix(1:6, 2, 3) # data, nrow, ncol\nM\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nstr(M)\n\n int [1:2, 1:3] 1 2 3 4 5 6\n\nattributes(M)\n\n$dim\n[1] 2 3\n\n\n\n\nThe byrow argument is also useful:\n\nN &lt;- matrix(1:6, 2, 3, byrow = TRUE) # data, nrow, ncol\nN\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6"
  },
  {
    "objectID": "slides/03-programming/index.html#matrix-functions",
    "href": "slides/03-programming/index.html#matrix-functions",
    "title": "Programming in R",
    "section": "Matrix functions",
    "text": "Matrix functions\nUseful functions for matrices include dim(), ncol(), nrow(), colnames() and rownames(). rbind() and cbind() can be used to row-bind or column-bind vectors.\nMatrices enable computation via matrix algebra as well as row/column-wise operations."
  },
  {
    "objectID": "slides/03-programming/index.html#lists",
    "href": "slides/03-programming/index.html#lists",
    "title": "Programming in R",
    "section": "Lists",
    "text": "Lists\nLists collect together items which may be different types or lengths. Like a vector, elements may be named.\n\nresults &lt;- list(matrix = M, vector = x)\nresults\n\n$matrix\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n$vector\nA1229 B1230 C1231 \n    3     4     5 \n\n\nLists are often used to return the results of a function."
  },
  {
    "objectID": "slides/03-programming/index.html#indexing-lists",
    "href": "slides/03-programming/index.html#indexing-lists",
    "title": "Programming in R",
    "section": "Indexing lists",
    "text": "Indexing lists\nElements can be indexed by [ to return a list or [[ to return a single element, either by index or name:\n\nresults[\"vector\"] # returns a list\n\n$vector\nA1229 B1230 C1231 \n    3     4     5 \n\nresults[[2]] # returns a vector\n\nA1229 B1230 C1231 \n    3     4     5 \n\n\n$ can be used to extract elements by name:\n\nresults$vector # equivalent to results[[\"vector\"]]\n\nA1229 B1230 C1231 \n    3     4     5"
  },
  {
    "objectID": "slides/03-programming/index.html#data-frames",
    "href": "slides/03-programming/index.html#data-frames",
    "title": "Programming in R",
    "section": "Data frames",
    "text": "Data frames\nData frames are lists of variables of the same length and hence can often be treated as a matrix\n\nx &lt;- 1:3\ndat &lt;- data.frame(x = x, id = letters[1:3])\ndat\n\n  x id\n1 1  a\n2 2  b\n3 3  c\n\ndat[1]\n\n  x\n1 1\n2 2\n3 3\n\ndat[[1]]\n\n[1] 1 2 3\n\ndat[1, 2]\n\n[1] \"a\""
  },
  {
    "objectID": "slides/03-programming/index.html#your-turn",
    "href": "slides/03-programming/index.html#your-turn",
    "title": "Programming in R",
    "section": "Your turn!",
    "text": "Your turn!\nThe lm function calls the “workhorse” function lm.fit to actually fit the model. Unlike lm, which works from a formula, lm.fit works from the model matrix and the response vector.\n\nDefine a response y containing 10 numeric values. Define an explanatory variable z of the numbers 1 to 10.\nUse the function cbind() to create a matrix x with 1s in the first column and z in the second column.\nFit a model using fit1 &lt;- lm.fit(x, y). Use str to explore the structure of the results. Use $ to extract the coefficients.\nCreate a second fit using lm(y ~ z). Use names to compare the results. Check the coefficients of the second fit are the same."
  },
  {
    "objectID": "slides/03-programming/index.html#your-turn-a-solution",
    "href": "slides/03-programming/index.html#your-turn-a-solution",
    "title": "Programming in R",
    "section": "Your turn! (a solution)",
    "text": "Your turn! (a solution)\n\n# A possible solution\n\nset.seed(1)\ny &lt;- sample(10)\nz &lt;- 1:10\n\nx &lt;- cbind(1, z) # we'll see this trick in a few slides time!\n\nfit1 &lt;- lm.fit(x,y)\nstr(fit1)\nfit1$coefficients\n\nfit2 &lt;- lm(y ~ z)\nnames(fit1)\nnames(fit2)\nfit2$coefficients"
  },
  {
    "objectID": "slides/03-programming/index.html#notation",
    "href": "slides/03-programming/index.html#notation",
    "title": "Programming in R",
    "section": "~ notation",
    "text": "~ notation\nThe ~ notation can be used to specify a model formula, where the LHS is the response and the RHS are a collection of predictors, e.g. \nbody_mass_g ~ bill_length_mm + flipper_length_mm.\nThis can be used as the formula argument when fitting a model, e.g. a linear model:\n\nlm(body_mass_g ~ bill_length_mm + flipper_length_mm, data = penguins) \n\n\nIn the formula, crucially, the + does not have to mean it is a linear additive model and should be read more as “this variable and this one etc” which the model function might use additively (e.g. lm) or might not (e.g. many ML models).\n\nThis is a bit of an aside in the context of this session, but discusses a point that Louis Aslett, one of the APTS module leaders, mentioned to me creates confusion in his course."
  },
  {
    "objectID": "slides/03-programming/index.html#control-structures",
    "href": "slides/03-programming/index.html#control-structures",
    "title": "Programming in R",
    "section": "Control structures",
    "text": "Control structures\nControl structures are the commands that make decisions or execute loops.\nConditional execution: if/else, switch\nLoops: for, while, repeat"
  },
  {
    "objectID": "slides/03-programming/index.html#ifelse",
    "href": "slides/03-programming/index.html#ifelse",
    "title": "Programming in R",
    "section": "if/else",
    "text": "if/else\nAn if statement can stand alone or be combined with an else statement\n\nx &lt;- 1:3\nif (all(x &gt; 0)) {\n    res &lt;- mean(x)\n} else {\n    res &lt;- mean(abs(x))\n}\nres\n\n[1] 2\n\n\nThe condition must evaluate to logical vector of length one. The functions all(), any(), is.na(), is.null() and other is. functions are useful here."
  },
  {
    "objectID": "slides/03-programming/index.html#conditioning-on-equality",
    "href": "slides/03-programming/index.html#conditioning-on-equality",
    "title": "Programming in R",
    "section": "Conditioning on equality",
    "text": "Conditioning on equality\nUsing == may not be appropriate as it compares each element; identical() will test the whole object\n\nx &lt;- y &lt;- 1:2\nx == y\n\n[1] TRUE TRUE\n\nidentical(x, y)\n\n[1] TRUE\n\n\nall.equal() will allow for some numerical tolerance.\n\nz &lt;- sqrt(2)\nidentical(z * z, 2)\n\n[1] FALSE\n\nall.equal(z * z, 2)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/03-programming/index.html#switch",
    "href": "slides/03-programming/index.html#switch",
    "title": "Programming in R",
    "section": "switch",
    "text": "switch\nThe switch() function provides a more readable alternative to nested if statements\n\nif (summary == \"IQR\") { \n    y &lt;- IQR(x)\n} else {\n    if (summary == \"range\"){\n        y &lt;- range(x)\n    } else y &lt;- mean(x)\n}\n\n\nx &lt;- 1:5\nswitch(\"range\", # can enter an arg name or position\n       IQR = IQR(x),\n       range = range(x),\n       mean(x))\n\n[1] 1 5\n\n\nThe final unnamed argument is the default. Further examples"
  },
  {
    "objectID": "slides/03-programming/index.html#for",
    "href": "slides/03-programming/index.html#for",
    "title": "Programming in R",
    "section": "for",
    "text": "for\nA for loop repeats a chunk of code, iterating along the values of a vector or list\n\nx &lt;- c(\"apple\", \"pear\")\nfor (nm in x) print(nm)\n\n[1] \"apple\"\n[1] \"pear\"\n\n\nUnassigned objects are not automatically printed; hence call to print().\n\nfor (i in seq_along(x)) {\n    message(\"Element \", i, \": \", x[i])\n}\n\nseq_along() is used here rather than 1:length(x) as length(x) may be zero. message is used to print messages to the console.\n\nmessage doesn’t produce output on a Quarto slide"
  },
  {
    "objectID": "slides/03-programming/index.html#while-and-repeat",
    "href": "slides/03-programming/index.html#while-and-repeat",
    "title": "Programming in R",
    "section": "while and repeat",
    "text": "while and repeat\nThe while loop repeats while a condition is TRUE\n\nn_iter &lt;- 1\nwhile (n_iter &lt; 3) {\n    x &lt;- x * 2\n    n_iter &lt;- n_iter + 1\n}\n\nThe repeat loop repeats until exited by break\n\nrepeat {\n    x &lt;- x + 1\n    if (max(x) &gt; 10) break\n}\n\nbreak can be used in for or while loops too.\nnext can be used to skip to the next iteration."
  },
  {
    "objectID": "slides/03-programming/index.html#iteration-functions",
    "href": "slides/03-programming/index.html#iteration-functions",
    "title": "Programming in R",
    "section": "Iteration functions",
    "text": "Iteration functions\nIteration functions provide a general alternative to for loops. They are not necessarily faster, but can be more compact.\napply() applies a function over rows/columns of a matrix.\nlapply(), sapply() and vapply() iterate over a list or vector. vapply() is recommended for programming as it specifies the type of return value\n\nvapply(list(a = 1:3, b = 1:6), FUN = mean, FUN.VALUE = numeric(1))\n\n  a   b \n2.0 3.5 \n\n\nmapply() iterates over two or more lists/vectors in parallel."
  },
  {
    "objectID": "slides/03-programming/index.html#iteration-function-resources",
    "href": "slides/03-programming/index.html#iteration-function-resources",
    "title": "Programming in R",
    "section": "Iteration function resources",
    "text": "Iteration function resources\n\nEfficient R by Colin Gillespie and Robin Lovelace\nThe built-in help pages. You can directly access the examples using the example() function, e.g. to run the apply() examples, use example(\"apply\").\nThis StackOverflow answer, describing when, where and how to use each of the functions.\nThis blog post by Neil Saunders"
  },
  {
    "objectID": "slides/03-programming/index.html#purrr",
    "href": "slides/03-programming/index.html#purrr",
    "title": "Programming in R",
    "section": "purrr",
    "text": "purrr\nThe purrr package (part of the tidyverse) provides alternatives to the apply family that have a simpler, more consistent interface with fixed type of return value.\n\n# Split a data frame into pieces, \n# fit a model to each piece, summarise and extract R^2\nlibrary(purrr)\n\nmtcars %&gt;%\n  split(.$cyl) %&gt;% # base R\n  map(~ lm(mpg ~ wt, data = .x)) %&gt;% # returns a list\n  map(summary) %&gt;%\n  map_dbl(\"r.squared\") # returns a vector\n\n        4         6         8 \n0.5086326 0.4645102 0.4229655 \n\n\nNote: We do need %&gt;% not |&gt; here. See here for more details.\n\nDo need to use the %&gt;% pipe here, not |&gt;."
  },
  {
    "objectID": "slides/03-programming/index.html#advantages-of-purrr",
    "href": "slides/03-programming/index.html#advantages-of-purrr",
    "title": "Programming in R",
    "section": "Advantages of purrr",
    "text": "Advantages of purrr\n\nThe first argument is always the data, so purrr works naturally with the pipe.\nAll purrr functions are type-stable. They always return the advertised output type (e.g. map() returns lists; map_dbl() returns double vectors), or they throw an error.\nAll map() functions either accept function, formulas (used for succinctly generating anonymous functions), a character vector (used to extract components by name), or a numeric vector (used to extract by position).\n\nSee the iteration chapter of R for Data Science for further examples and details"
  },
  {
    "objectID": "slides/03-programming/index.html#growing-objects",
    "href": "slides/03-programming/index.html#growing-objects",
    "title": "Programming in R",
    "section": "Growing objects",
    "text": "Growing objects\nAdding to an object in a loop, e.g. via c() or cbind()\n\nres &lt;- NULL\nfor (i in 1:10000) res &lt;- c(res, 1)\n\nforces a copy to be made at each iteration. THIS IS BAD!\nIt is far better to create an object of the necessary size first\n\nres &lt;- numeric(10000)\nfor (i in seq_along(res)) res[i] &lt;- 1\n\nTo initialise a list we can use\n\nres &lt;- vector(mode = \"list\", length = 100)"
  },
  {
    "objectID": "slides/03-programming/index.html#benchmarking",
    "href": "slides/03-programming/index.html#benchmarking",
    "title": "Programming in R",
    "section": "Benchmarking",
    "text": "Benchmarking\nThere will usually be many ways to write code for a given task. To compare alternatives, we can benchmark the expression\n\nlibrary(rbenchmark)\nbenchmark({res &lt;- NULL;\n           for (i in 1:10000) res &lt;- c(res, 1)})$elapsed\n\n[1] 11.632\n\nbenchmark({res &lt;- numeric(10000)\n           for (i in seq_along(res)) res[i] &lt;- 1})$elapsed\n\n[1] 0.081\n\n\nNote the BIG difference between growing and initialising a vector (the latter around 150 times faster in this case)."
  },
  {
    "objectID": "slides/03-programming/index.html#for-loops-revisited",
    "href": "slides/03-programming/index.html#for-loops-revisited",
    "title": "Programming in R",
    "section": "for loops revisited",
    "text": "for loops revisited\nEach loop has three components:\n\nThe output: allocate sufficient space before you start the loop\nThe sequence: this determines what you loop over\nThe body: the code that does the work\n\nSee https://r4ds.had.co.nz/iteration.html#for-loops"
  },
  {
    "objectID": "slides/03-programming/index.html#vectorization",
    "href": "slides/03-programming/index.html#vectorization",
    "title": "Programming in R",
    "section": "Vectorization",
    "text": "Vectorization\nVectorization is operating on vectors (or vector-like objects) rather than individual elements.\nMany operations in R are vectorized, e.g.\n\nx &lt;- 1:3\ny &lt;- 3:1\nx == y\n\n[1] FALSE  TRUE FALSE\n\nlog(x)\n\n[1] 0.0000000 0.6931472 1.0986123\n\nres &lt;- list(a = 1:3, b = 1:6)\nlengths(res)\n\na b \n3 6 \n\n\nWe do not need to loop through each element!"
  },
  {
    "objectID": "slides/03-programming/index.html#recycling",
    "href": "slides/03-programming/index.html#recycling",
    "title": "Programming in R",
    "section": "Recycling",
    "text": "Recycling\nVectorized functions will recycle shorter vectors to create vectors of the same length\n\n1:4 + 0:1 # 1+0, 2+1, 3+0, 4+1\n\n[1] 1 3 3 5\n\n\nThis is particularly useful for single values\n\ncbind(1, 3:4)\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    1    4\n\n\nand for generating regular patterns\n\npaste0(rep(1:3, each = 2), c(\"a\", \"b\"))\n\n[1] \"1a\" \"1b\" \"2a\" \"2b\" \"3a\" \"3b\""
  },
  {
    "objectID": "slides/03-programming/index.html#your-turn-1",
    "href": "slides/03-programming/index.html#your-turn-1",
    "title": "Programming in R",
    "section": "Your turn!",
    "text": "Your turn!\n\nWrite a for loop to compute the mean of every column of in mtcars, saving each to a preallocated vector\nUse lapply() with rnorm to generate a list of length 10 where the 1st item contains a vector of 1 sample from an \\(N(0,1)\\) distribution, the 2nd item contains a vector of 2 samples from an \\(N(0,1)\\) distribution up to the 10th item contains a vector of 10 samples from an \\(N(0,1)\\) distibution.\nUse lapply() with rnorm to generate a list of length 10, where the 1st item contains a vector of 5 samples from \\(N(1,1)\\), the 2nd item contains a vector of 5 samples \\(N(2,1)\\) and so on until you get 5 samples from \\(N(10,1)\\)"
  },
  {
    "objectID": "slides/03-programming/index.html#your-turn-sample-solutions",
    "href": "slides/03-programming/index.html#your-turn-sample-solutions",
    "title": "Programming in R",
    "section": "Your turn! (sample solutions)",
    "text": "Your turn! (sample solutions)\n\nout &lt;- numeric(ncol(mtcars))\n\nfor (i in seq_len(ncol(mtcars))) {\n  out[i] &lt;- mean(mtcars[[i]])\n}\n\n\nlapply(1:10, rnorm)\n\n\nlapply(1:10, rnorm, n = 5)"
  },
  {
    "objectID": "slides/03-programming/index.html#vectorization-and-matrices",
    "href": "slides/03-programming/index.html#vectorization-and-matrices",
    "title": "Programming in R",
    "section": "Vectorization and matrices",
    "text": "Vectorization and matrices\nVectorizations applies to matices too, not only through matrix algebra\n\nM &lt;- matrix(1:4, nrow = 2, ncol = 2)\nM + M\n\n     [,1] [,2]\n[1,]    2    6\n[2,]    4    8\n\n\nbut also vectorized functions\n\nM &lt;- M + 1.3\nround(M)\n\n     [,1] [,2]\n[1,]    2    4\n[2,]    3    5"
  },
  {
    "objectID": "slides/03-programming/index.html#matrices-and-recycling-rows",
    "href": "slides/03-programming/index.html#matrices-and-recycling-rows",
    "title": "Programming in R",
    "section": "Matrices and recycling: rows",
    "text": "Matrices and recycling: rows\nValues are recycled down matrix, which is convenient for row-wise operations\n\nM &lt;- matrix(1:6, nrow = 2, ncol = 3)\nM\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nM - 1:2\n\n     [,1] [,2] [,3]\n[1,]    0    2    4\n[2,]    0    2    4"
  },
  {
    "objectID": "slides/03-programming/index.html#matrices-and-recycling-columns",
    "href": "slides/03-programming/index.html#matrices-and-recycling-columns",
    "title": "Programming in R",
    "section": "Matrices and recycling: columns",
    "text": "Matrices and recycling: columns\nTo do the same for columns we would need to explicitly replicate, which is not so efficient.\n\nM - rep(1:3, each = 2)\n\n     [,1] [,2] [,3]\n[1,]    0    1    2\n[2,]    1    2    3"
  },
  {
    "objectID": "slides/03-programming/index.html#vectorization-vs-for-loop",
    "href": "slides/03-programming/index.html#vectorization-vs-for-loop",
    "title": "Programming in R",
    "section": "Vectorization vs for loop",
    "text": "Vectorization vs for loop\nOperations that can be vectorized will be more efficient than a loop in R\n\nM &lt;- matrix(1:100000, nrow = 200, ncol = 500)\nx &lt;- 1:200\nbenchmark({for (i in 1:200){\n             for (j in 1:500){\n               M[i, j] &lt;- M[i, j] - x[i]\n             }\n           }})$elapsed\n\n[1] 0.743\n\nbenchmark({M - x})$elapsed\n\n[1] 0.024\n\n\nThe latter is nearly 30 times faster!"
  },
  {
    "objectID": "slides/03-programming/index.html#rowcolumn-wise-operations",
    "href": "slides/03-programming/index.html#rowcolumn-wise-operations",
    "title": "Programming in R",
    "section": "Row/column-wise operations",
    "text": "Row/column-wise operations\nSeveral functions are available implementing efficient row/column-wise operations, e.g. colMeans(), rowMeans(), colSums(), rowSums(), sweep()\n\nM &lt;- matrix(1:4, nrow = 2, ncol = 2)\nrowMeans(M)\n\n[1] 2 3\n\n\nThese provide an alternative to iterating though rows and columns in R (the iteration happens in C, which is faster).\nThe matrixStats package provides further “matricised” methods."
  },
  {
    "objectID": "slides/03-programming/index.html#top-tips-for-efficient-programming",
    "href": "slides/03-programming/index.html#top-tips-for-efficient-programming",
    "title": "Programming in R",
    "section": "Top tips for efficient programming",
    "text": "Top tips for efficient programming\nA golden rule in R programming is to access the underlying C/Fortran routines as quickly as possible; the fewer functions calls required to achieve this, the better.\n\nBe careful never to grow vectors\nVectorise code wherever possible\n\nSee Efficient Programming for more details and examples.\nWe will also expand on this topic in the Advanced R course next term."
  },
  {
    "objectID": "slides/03-programming/index.html#components-of-a-function",
    "href": "slides/03-programming/index.html#components-of-a-function",
    "title": "Programming in R",
    "section": "Components of a function",
    "text": "Components of a function\nFunctions are defined by three components:\n\nthe name of the function\nthe arguments of the function, inside ( )\nthe body of the function that computes the result, inside { }\n\nThey are created using function()\n\nt_statistic &lt;- function(n) {\n    x &lt;- rnorm(n)\n    y &lt;- rnorm(n)\n    t.test(x, y)$statistic\n}"
  },
  {
    "objectID": "slides/03-programming/index.html#naming-functions",
    "href": "slides/03-programming/index.html#naming-functions",
    "title": "Programming in R",
    "section": "Naming functions",
    "text": "Naming functions\nAs with arguments, function names are important:\n\nuse a name that describes what it returns (e.g. t_statistic) or what it does (e.g. remove_na)\ntry to use one convention for combining words (e.g. snake case t_statistic or camel case tStatistic)\navoid using the same name as other functions"
  },
  {
    "objectID": "slides/03-programming/index.html#specified-arguments",
    "href": "slides/03-programming/index.html#specified-arguments",
    "title": "Programming in R",
    "section": "Specified arguments",
    "text": "Specified arguments\nspecified arguments are those named in the function definition, e.g.  in rnorm()\n\nargs(rnorm)\n\nfunction (n, mean = 0, sd = 1) \nNULL\n\n\nthe arguments are n, mean and sd.\nmean and sd have been given default values in the function definition, but n has not, so the function fails if the user does not pass a value to n\n\nrnorm()\n\nError in rnorm(): argument \"n\" is missing, with no default"
  },
  {
    "objectID": "slides/03-programming/index.html#name-and-order-of-arguments",
    "href": "slides/03-programming/index.html#name-and-order-of-arguments",
    "title": "Programming in R",
    "section": "Name and order of arguments",
    "text": "Name and order of arguments\nThe user can pass objects to these arguments using their names or by supplying unnamed values in the right order\n\nrnorm(5, 1, 10)\n\n[1]   6.331252   4.410714  -2.674293 -11.093922   8.841681\n\nrnorm(5, sd = 10)\n\n[1] 24.153713 16.208097  3.325539 19.987547  8.504005\n\n\nSo naming and order is important! Some guidelines\n\nput compulsory arguments first, e.g. data\nput rarely used arguments last, e.g. tolerance setting\nuse short but meaningful argument names\nif relevant, use the same argument names as similar functions"
  },
  {
    "objectID": "slides/03-programming/index.html#using-arguments",
    "href": "slides/03-programming/index.html#using-arguments",
    "title": "Programming in R",
    "section": "Using arguments",
    "text": "Using arguments\nArguments are used as objects in the function code.\nAn new environment is created each time the function is called, separate from the global workspace.\n\nx &lt;- 1\ny &lt;- 3\nf &lt;- function(x, y){\n    a &lt;- 1\n    x &lt;- x + a\n    x + y\n}\nf(x, y)\n\n[1] 5\n\nx\n\n[1] 1\n\na\n\nError: object 'a' not found"
  },
  {
    "objectID": "slides/03-programming/index.html#lexical-scoping",
    "href": "slides/03-programming/index.html#lexical-scoping",
    "title": "Programming in R",
    "section": "Lexical scoping",
    "text": "Lexical scoping\nIf an object is not defined within the function, or passed in as an argument, R looks for it in the parent environment where the function was defined\n\nx &lt;- 1\ny &lt;- 3\nf &lt;- function(x){\n    x + y\n}\nf(x)\n\n[1] 4\n\nrm(y)\nf(x)\n\nError in f(x): object 'y' not found\n\n\nIt is safest (and best practice) to use arguments rather than depend on global variables!"
  },
  {
    "objectID": "slides/03-programming/index.html#return-values-single",
    "href": "slides/03-programming/index.html#return-values-single",
    "title": "Programming in R",
    "section": "Return values (single)",
    "text": "Return values (single)\nBy default, functions return the object created by the last line of code\n\nf &lt;- function(x) {\n    x &lt;- x + 1\n    log(x)\n}\n\nAlternatively return() can be used to terminate the function and return a given object\n\nf &lt;- function(x) {\n    if (all(x &gt; 0)) return(log(x))\n    x[x &lt;= 0] &lt;- 0.1\n    log(x)\n}"
  },
  {
    "objectID": "slides/03-programming/index.html#return-values-multiple",
    "href": "slides/03-programming/index.html#return-values-multiple",
    "title": "Programming in R",
    "section": "Return values (multiple)",
    "text": "Return values (multiple)\nMultiple objects can be returned in a list:\n\nmean_and_sd &lt;- function(x) {\n  res_mean &lt;- mean(x, na.rm = TRUE)\n  res_sd &lt;- sd(x)\n  \n  list(mean = res_mean, sd = res_sd)\n}\n\nmean_and_sd(1:3)\n\n$mean\n[1] 2\n\n$sd\n[1] 1\n\n\nWe use a list so that we can return different types of objects simultaneously, and access them easily with $, e.g. mean_and_sd(1:3)$mean returns 2."
  },
  {
    "objectID": "slides/03-programming/index.html#your-turn-2",
    "href": "slides/03-programming/index.html#your-turn-2",
    "title": "Programming in R",
    "section": "Your turn!",
    "text": "Your turn!\nWrite your own function, variance, to compute the variance of a numeric vector:\n\\[\nVar(x) = \\frac{1}{n-1}\\sum_{i=1}^n(x_i - \\bar{x})^2\n\\]\nMake use of R’s built in vectorisation.\nTest it and compare your answer with the built-in var() function."
  },
  {
    "objectID": "slides/03-programming/index.html#your-turn-a-solution-1",
    "href": "slides/03-programming/index.html#your-turn-a-solution-1",
    "title": "Programming in R",
    "section": "Your turn! (a solution)",
    "text": "Your turn! (a solution)\n\nvariance &lt;- function(x) {\n  1/(length(x) - 1) * sum((x - mean(x))^2)\n}"
  },
  {
    "objectID": "slides/03-programming/index.html#resources",
    "href": "slides/03-programming/index.html#resources",
    "title": "Programming in R",
    "section": "Resources",
    "text": "Resources\nMaterial (very largely) inspired by and remixed from:\n\nHeather Turner and Erlap Dogu’s R Programming slides (with permission)\n\nAdditionally:\n\nEfficient R, Chapter 3 by Colin Gillespie and Robin Lovelace\nR for Data Science, by Hadley Wickham and Garrett Grolemund, chapters on iteration and functions"
  },
  {
    "objectID": "slides/03-programming/index.html#license",
    "href": "slides/03-programming/index.html#license",
    "title": "Programming in R",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/03-programming/index.html#unspecified-arguments",
    "href": "slides/03-programming/index.html#unspecified-arguments",
    "title": "Programming in R",
    "section": "Unspecified Arguments",
    "text": "Unspecified Arguments\n... or the ellipsis allow unspecified arguments to be passed to the function.\nThis device is used by functions that work with arbitrary numbers of objects, e.g. \n\nargs(sum)\n\nfunction (..., na.rm = FALSE) \nNULL\n\nsum(1, 4, 10, 2)\n\n[1] 17\n\n\nIt can also be used to pass on arguments to another function, e.g.\n\nt_statistic &lt;- function(x, g, ...) {\n    t.test(x ~ g, ...)$stat\n}"
  },
  {
    "objectID": "slides/03-programming/index.html#using-...",
    "href": "slides/03-programming/index.html#using-...",
    "title": "Programming in R",
    "section": "Using ...",
    "text": "Using ...\nArguments passed to ... can be collected into a list for further analysis\n\nmeans &lt;- function(...){\n    dots &lt;- list(...)\n    vapply(dots, mean, numeric(1), na.rm = TRUE)\n}\nx &lt;- 1\ny &lt;- 2:3\nmeans(x, y)\n\n[1] 1.0 2.5\n\n\nSimilarly the objects could be concatenated using c()"
  },
  {
    "objectID": "slides/03-programming/index.html#side-effects",
    "href": "slides/03-programming/index.html#side-effects",
    "title": "Programming in R",
    "section": "Side Effects",
    "text": "Side Effects\nA side-effect is a change outside the function that occurs when the function is run, e.g.\n\nplot to the graphics window or other device\nprinting output to the console\nwrite data to a file\n\nA function can have many side-effects and a return value, but it is best practice to have a separate function for each task, e.g creating a plot or a table.\nWriting to file is usually best done outside a function."
  },
  {
    "objectID": "slides/01-intro/index.html#overview",
    "href": "slides/01-intro/index.html#overview",
    "title": "Introduction to R and RStudio",
    "section": "Overview",
    "text": "Overview\n\nWhy use R?\nUse RStudio to write and run R programmes\nCreate and start an R project\nUse install.packages() to install packages\nHow to get help in R\nSee examples of data wrangling and visualisation"
  },
  {
    "objectID": "slides/01-intro/index.html#what-can-r-do",
    "href": "slides/01-intro/index.html#what-can-r-do",
    "title": "Introduction to R and RStudio",
    "section": "What can R do?",
    "text": "What can R do?\n\n\n\nData import\nData management and wrangling\nExploratory data analysis\nStatistical modelling\nAdvanced statistics\nMachine learning\n\n\n\nData visualisation\nReports, articles\nDashboards, web apps\nIntegrates well with other languages\nPackages: share your code and use others"
  },
  {
    "objectID": "slides/01-intro/index.html#the-r-ecosystem",
    "href": "slides/01-intro/index.html#the-r-ecosystem",
    "title": "Introduction to R and RStudio",
    "section": "The R Ecosystem",
    "text": "The R Ecosystem\nBase R\n\n\n15 base packages\n\nCreate R objects\nSummaries\nMaths functions\nStatistics\nGraphics\nDatasets\n\n\n15 recommended packages\n\nStatistics methodology\nMore maths\nMore graphics\n\n\n\nR is distributed with fifteen “base packages”: base, compiler, datasets, grDevices, graphics, grid, methods, parallel, splines, stats, stats4, tcltk, tools, translations, and utils.\nIn addition, there are fifteen “recommended packages” from CRAN which are included with binary distributions of R: KernSmooth, MASS, Matrix, boot, class, cluster, codetools, foreign, lattice, mgcv, nlme, nnet, rpart, spatial, and survival.\nhttps://en.wikipedia.org/wiki/R_package#Base_and_recommended_packages"
  },
  {
    "objectID": "slides/01-intro/index.html#the-r-ecosystem-1",
    "href": "slides/01-intro/index.html#the-r-ecosystem-1",
    "title": "Introduction to R and RStudio",
    "section": "The R Ecosystem",
    "text": "The R Ecosystem\nContributed packages\n\n\nCRAN\n\nOfficial R repository\nhttps://cran.r-project.org\nOver 20,000 packages\n\n\nBioconductor\n\nBioinformatics packages\nhttps://www.bioconductor.org\n~2100 packages\n\n\nGitHub\n\nPackages in development\nGitHub-only packages"
  },
  {
    "objectID": "slides/01-intro/index.html#the-tidyverse",
    "href": "slides/01-intro/index.html#the-tidyverse",
    "title": "Introduction to R and RStudio",
    "section": "The tidyverse",
    "text": "The tidyverse\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar and data structures.\n\nFrom https://education.rstudio.com/blog/2020/07/teaching-the-tidyverse-in-2020-part-1-getting-started/tidyverse 2.0.0. includes lubridate for date-times as well (not shown in image)."
  },
  {
    "objectID": "slides/01-intro/index.html#penguins-data",
    "href": "slides/01-intro/index.html#penguins-data",
    "title": "Introduction to R and RStudio",
    "section": "penguins data",
    "text": "penguins data\n\nAvailable in R &gt;= 4.5.0\nOriginally popularised in the palmerpenguins package, as a great dataset for learning data exploration, visualisation and on which to practice statistical methodology.\nIt contains measurement data for 344 penguins, from three different species, collected from three islands in the Palmer Archipelago, Antarctica.\n\n\nPenguin artwork by Allison Horst https://allisonhorst.github.io/palmerpenguins/articles/art.html"
  },
  {
    "objectID": "slides/01-intro/index.html#the-r-community",
    "href": "slides/01-intro/index.html#the-r-community",
    "title": "Introduction to R and RStudio",
    "section": "The R community",
    "text": "The R community\nAnother reason to love R is the community around it.\nIt prides itself on being friendly, diverse, helpful, and supportive.\n\nR user groups, especially Warwick RUG\nRLadies, especially RLadies Coventry\nRStudio Community\nR for Data Science\n#RStats and #TidyTuesday on Mastodon\nrainbowR (LGBTQ+)\nMiR (minorities in R)"
  },
  {
    "objectID": "slides/01-intro/index.html#at-first",
    "href": "slides/01-intro/index.html#at-first",
    "title": "Introduction to R and RStudio",
    "section": "At first",
    "text": "At first"
  },
  {
    "objectID": "slides/01-intro/index.html#with-script",
    "href": "slides/01-intro/index.html#with-script",
    "title": "Introduction to R and RStudio",
    "section": "With script",
    "text": "With script\n RStudio cheatsheet"
  },
  {
    "objectID": "slides/01-intro/index.html#best-practice-use-r-projects",
    "href": "slides/01-intro/index.html#best-practice-use-r-projects",
    "title": "Introduction to R and RStudio",
    "section": "Best practice: use R projects",
    "text": "Best practice: use R projects\nAn RStudio project is a contect for working on a specific project\n\nKeeps files well-organised\nAutomatically sets working directory to project root\nHas separate workspace and command history\nWorks well with version control via git or svn"
  },
  {
    "objectID": "slides/01-intro/index.html#getting-started-with-projects",
    "href": "slides/01-intro/index.html#getting-started-with-projects",
    "title": "Introduction to R and RStudio",
    "section": "Getting started with projects",
    "text": "Getting started with projects\n\nCreate a project from a new or existing directory via the file menu or new project button\nSwitch project, or open a different project in a new RStudio instance via the project menu"
  },
  {
    "objectID": "slides/01-intro/index.html#rstudio-project-demo",
    "href": "slides/01-intro/index.html#rstudio-project-demo",
    "title": "Introduction to R and RStudio",
    "section": "RStudio project demo",
    "text": "RStudio project demo\n\nCreate R-Foundations project\nCreate first script"
  },
  {
    "objectID": "slides/01-intro/index.html#using-the-console",
    "href": "slides/01-intro/index.html#using-the-console",
    "title": "Introduction to R and RStudio",
    "section": "Using the console",
    "text": "Using the console\n\nFor things that only need doing once, e.g. installing packages\nFor doing things you don’t need to track, e.g. requesting help files\nTo quickly explore new ideas before adding them to a script"
  },
  {
    "objectID": "slides/01-intro/index.html#using-the-console-shortcuts",
    "href": "slides/01-intro/index.html#using-the-console-shortcuts",
    "title": "Introduction to R and RStudio",
    "section": "Using the console: shortcuts",
    "text": "Using the console: shortcuts\nRStudio provides a few shortcuts to help write code in the R console\n\n↑/↓ go back/forward through history one command at a time\nCtrl/⌘ + ↑ review recent history and select command\nTab view possible completions for part-written expression\n\nCode completion (using Tab) is also provided in the source editor"
  },
  {
    "objectID": "slides/01-intro/index.html#using-the-console-demo",
    "href": "slides/01-intro/index.html#using-the-console-demo",
    "title": "Introduction to R and RStudio",
    "section": "Using the console: demo",
    "text": "Using the console: demo\n1 + 1\n?log\nlog(10)\nexp(-4 * 4 / 2) / sqrt(2 * pi)\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\") # Only if using R &lt; 4.5.0"
  },
  {
    "objectID": "slides/01-intro/index.html#using-scripts",
    "href": "slides/01-intro/index.html#using-scripts",
    "title": "Introduction to R and RStudio",
    "section": "Using scripts",
    "text": "Using scripts\nText files saved with an .R suffix are recognised as R code\nCode can be sent directly from a script to the console as follows:\n\nCtrl/⌘ + ↵ or  run current line\n\nRun multiple lines by selecting first\n\nCtrl/⌘ + Shift + ↵ or \n\nRun the script from start to finish."
  },
  {
    "objectID": "slides/01-intro/index.html#why-r-scripts",
    "href": "slides/01-intro/index.html#why-r-scripts",
    "title": "Introduction to R and RStudio",
    "section": "Why R scripts?",
    "text": "Why R scripts?\nWriting an R script for an analysis has several advantages over a graphical user interface (GUI)\n\nIt provides a record of the exact approach used in an analysis\nIt enables the analysis to be easily reproduced and modified\nIt allows greater control"
  },
  {
    "objectID": "slides/01-intro/index.html#good-practice-for-r-scripts",
    "href": "slides/01-intro/index.html#good-practice-for-r-scripts",
    "title": "Introduction to R and RStudio",
    "section": "Good practice for R Scripts",
    "text": "Good practice for R Scripts\nOrganising your R script well will help you and others understand and use it.\n\nAdd comment or two at start to describe purpose of script\n\nUse one or more # to start a comment\n\nLoad required data and packages at the start\nAvoid hard-coding: define variables such as file paths early on\nGive functions and variable meaningful names\nuse ### or #--- to separate sections (in RStudio Code &gt; Insert Section)"
  },
  {
    "objectID": "slides/01-intro/index.html#installing-packages",
    "href": "slides/01-intro/index.html#installing-packages",
    "title": "Introduction to R and RStudio",
    "section": "Installing packages",
    "text": "Installing packages\nIn console\n\nInstall a package with install.packages(\"package_name\")\n\nWatch out for the plural!\n\nInstall multiple packages with install.packages(c(\"package1\", \"package2\"))\n\nThe c() function creates a vector\n\nOr use install button in packages pane:"
  },
  {
    "objectID": "slides/01-intro/index.html#loading-packages",
    "href": "slides/01-intro/index.html#loading-packages",
    "title": "Introduction to R and RStudio",
    "section": "Loading packages",
    "text": "Loading packages\nIn script\n\nLoad packages with library(package_name)"
  },
  {
    "objectID": "slides/01-intro/index.html#your-turn",
    "href": "slides/01-intro/index.html#your-turn",
    "title": "Introduction to R and RStudio",
    "section": "Your turn",
    "text": "Your turn\n\nCreate an R project called “r-foundations”\nInstall the tidyverse package, and palmerpenguins if using R &lt; 4.5.0\nFind the help page for the penguins dataset\nFind the help page for the filter function in the dplyr package\nExperiment typing commands into the console or in an R script.\n\nlink to slides"
  },
  {
    "objectID": "slides/01-intro/index.html#r-script-demo",
    "href": "slides/01-intro/index.html#r-script-demo",
    "title": "Introduction to R and RStudio",
    "section": "R script demo",
    "text": "R script demo\n### load packages\nlibrary(tidyverse)\nlibrary(palmerpenguins) # Only if R &lt; 4.5\n\n### Inspect data (base R functions)\nView(penguins)\nhead(penguins)\nsummary(penguins)\n\n### tidyverse functions\nglimpse(penguins)"
  },
  {
    "objectID": "slides/01-intro/index.html#the-data",
    "href": "slides/01-intro/index.html#the-data",
    "title": "Introduction to R and RStudio",
    "section": "The data",
    "text": "The data\n\n\npenguins\n\n      species    island bill_len bill_dep flipper_len body_mass    sex year\n1      Adelie Torgersen     39.1     18.7         181      3750   male 2007\n2      Adelie Torgersen     39.5     17.4         186      3800 female 2007\n3      Adelie Torgersen     40.3     18.0         195      3250 female 2007\n4      Adelie Torgersen       NA       NA          NA        NA   &lt;NA&gt; 2007\n5      Adelie Torgersen     36.7     19.3         193      3450 female 2007\n6      Adelie Torgersen     39.3     20.6         190      3650   male 2007\n7      Adelie Torgersen     38.9     17.8         181      3625 female 2007\n8      Adelie Torgersen     39.2     19.6         195      4675   male 2007\n9      Adelie Torgersen     34.1     18.1         193      3475   &lt;NA&gt; 2007\n10     Adelie Torgersen     42.0     20.2         190      4250   &lt;NA&gt; 2007\n11     Adelie Torgersen     37.8     17.1         186      3300   &lt;NA&gt; 2007\n12     Adelie Torgersen     37.8     17.3         180      3700   &lt;NA&gt; 2007\n13     Adelie Torgersen     41.1     17.6         182      3200 female 2007\n14     Adelie Torgersen     38.6     21.2         191      3800   male 2007\n15     Adelie Torgersen     34.6     21.1         198      4400   male 2007\n16     Adelie Torgersen     36.6     17.8         185      3700 female 2007\n17     Adelie Torgersen     38.7     19.0         195      3450 female 2007\n18     Adelie Torgersen     42.5     20.7         197      4500   male 2007\n19     Adelie Torgersen     34.4     18.4         184      3325 female 2007\n20     Adelie Torgersen     46.0     21.5         194      4200   male 2007\n21     Adelie    Biscoe     37.8     18.3         174      3400 female 2007\n22     Adelie    Biscoe     37.7     18.7         180      3600   male 2007\n23     Adelie    Biscoe     35.9     19.2         189      3800 female 2007\n24     Adelie    Biscoe     38.2     18.1         185      3950   male 2007\n25     Adelie    Biscoe     38.8     17.2         180      3800   male 2007\n26     Adelie    Biscoe     35.3     18.9         187      3800 female 2007\n27     Adelie    Biscoe     40.6     18.6         183      3550   male 2007\n28     Adelie    Biscoe     40.5     17.9         187      3200 female 2007\n29     Adelie    Biscoe     37.9     18.6         172      3150 female 2007\n30     Adelie    Biscoe     40.5     18.9         180      3950   male 2007\n31     Adelie     Dream     39.5     16.7         178      3250 female 2007\n32     Adelie     Dream     37.2     18.1         178      3900   male 2007\n33     Adelie     Dream     39.5     17.8         188      3300 female 2007\n34     Adelie     Dream     40.9     18.9         184      3900   male 2007\n35     Adelie     Dream     36.4     17.0         195      3325 female 2007\n36     Adelie     Dream     39.2     21.1         196      4150   male 2007\n37     Adelie     Dream     38.8     20.0         190      3950   male 2007\n38     Adelie     Dream     42.2     18.5         180      3550 female 2007\n39     Adelie     Dream     37.6     19.3         181      3300 female 2007\n40     Adelie     Dream     39.8     19.1         184      4650   male 2007\n41     Adelie     Dream     36.5     18.0         182      3150 female 2007\n42     Adelie     Dream     40.8     18.4         195      3900   male 2007\n43     Adelie     Dream     36.0     18.5         186      3100 female 2007\n44     Adelie     Dream     44.1     19.7         196      4400   male 2007\n45     Adelie     Dream     37.0     16.9         185      3000 female 2007\n46     Adelie     Dream     39.6     18.8         190      4600   male 2007\n47     Adelie     Dream     41.1     19.0         182      3425   male 2007\n48     Adelie     Dream     37.5     18.9         179      2975   &lt;NA&gt; 2007\n49     Adelie     Dream     36.0     17.9         190      3450 female 2007\n50     Adelie     Dream     42.3     21.2         191      4150   male 2007\n51     Adelie    Biscoe     39.6     17.7         186      3500 female 2008\n52     Adelie    Biscoe     40.1     18.9         188      4300   male 2008\n53     Adelie    Biscoe     35.0     17.9         190      3450 female 2008\n54     Adelie    Biscoe     42.0     19.5         200      4050   male 2008\n55     Adelie    Biscoe     34.5     18.1         187      2900 female 2008\n56     Adelie    Biscoe     41.4     18.6         191      3700   male 2008\n57     Adelie    Biscoe     39.0     17.5         186      3550 female 2008\n58     Adelie    Biscoe     40.6     18.8         193      3800   male 2008\n59     Adelie    Biscoe     36.5     16.6         181      2850 female 2008\n60     Adelie    Biscoe     37.6     19.1         194      3750   male 2008\n61     Adelie    Biscoe     35.7     16.9         185      3150 female 2008\n62     Adelie    Biscoe     41.3     21.1         195      4400   male 2008\n63     Adelie    Biscoe     37.6     17.0         185      3600 female 2008\n64     Adelie    Biscoe     41.1     18.2         192      4050   male 2008\n65     Adelie    Biscoe     36.4     17.1         184      2850 female 2008\n66     Adelie    Biscoe     41.6     18.0         192      3950   male 2008\n67     Adelie    Biscoe     35.5     16.2         195      3350 female 2008\n68     Adelie    Biscoe     41.1     19.1         188      4100   male 2008\n69     Adelie Torgersen     35.9     16.6         190      3050 female 2008\n70     Adelie Torgersen     41.8     19.4         198      4450   male 2008\n71     Adelie Torgersen     33.5     19.0         190      3600 female 2008\n72     Adelie Torgersen     39.7     18.4         190      3900   male 2008\n73     Adelie Torgersen     39.6     17.2         196      3550 female 2008\n74     Adelie Torgersen     45.8     18.9         197      4150   male 2008\n75     Adelie Torgersen     35.5     17.5         190      3700 female 2008\n76     Adelie Torgersen     42.8     18.5         195      4250   male 2008\n77     Adelie Torgersen     40.9     16.8         191      3700 female 2008\n78     Adelie Torgersen     37.2     19.4         184      3900   male 2008\n79     Adelie Torgersen     36.2     16.1         187      3550 female 2008\n80     Adelie Torgersen     42.1     19.1         195      4000   male 2008\n81     Adelie Torgersen     34.6     17.2         189      3200 female 2008\n82     Adelie Torgersen     42.9     17.6         196      4700   male 2008\n83     Adelie Torgersen     36.7     18.8         187      3800 female 2008\n84     Adelie Torgersen     35.1     19.4         193      4200   male 2008\n85     Adelie     Dream     37.3     17.8         191      3350 female 2008\n86     Adelie     Dream     41.3     20.3         194      3550   male 2008\n87     Adelie     Dream     36.3     19.5         190      3800   male 2008\n88     Adelie     Dream     36.9     18.6         189      3500 female 2008\n89     Adelie     Dream     38.3     19.2         189      3950   male 2008\n90     Adelie     Dream     38.9     18.8         190      3600 female 2008\n91     Adelie     Dream     35.7     18.0         202      3550 female 2008\n92     Adelie     Dream     41.1     18.1         205      4300   male 2008\n93     Adelie     Dream     34.0     17.1         185      3400 female 2008\n94     Adelie     Dream     39.6     18.1         186      4450   male 2008\n95     Adelie     Dream     36.2     17.3         187      3300 female 2008\n96     Adelie     Dream     40.8     18.9         208      4300   male 2008\n97     Adelie     Dream     38.1     18.6         190      3700 female 2008\n98     Adelie     Dream     40.3     18.5         196      4350   male 2008\n99     Adelie     Dream     33.1     16.1         178      2900 female 2008\n100    Adelie     Dream     43.2     18.5         192      4100   male 2008\n101    Adelie    Biscoe     35.0     17.9         192      3725 female 2009\n102    Adelie    Biscoe     41.0     20.0         203      4725   male 2009\n103    Adelie    Biscoe     37.7     16.0         183      3075 female 2009\n104    Adelie    Biscoe     37.8     20.0         190      4250   male 2009\n105    Adelie    Biscoe     37.9     18.6         193      2925 female 2009\n106    Adelie    Biscoe     39.7     18.9         184      3550   male 2009\n107    Adelie    Biscoe     38.6     17.2         199      3750 female 2009\n108    Adelie    Biscoe     38.2     20.0         190      3900   male 2009\n109    Adelie    Biscoe     38.1     17.0         181      3175 female 2009\n110    Adelie    Biscoe     43.2     19.0         197      4775   male 2009\n111    Adelie    Biscoe     38.1     16.5         198      3825 female 2009\n112    Adelie    Biscoe     45.6     20.3         191      4600   male 2009\n113    Adelie    Biscoe     39.7     17.7         193      3200 female 2009\n114    Adelie    Biscoe     42.2     19.5         197      4275   male 2009\n115    Adelie    Biscoe     39.6     20.7         191      3900 female 2009\n116    Adelie    Biscoe     42.7     18.3         196      4075   male 2009\n117    Adelie Torgersen     38.6     17.0         188      2900 female 2009\n118    Adelie Torgersen     37.3     20.5         199      3775   male 2009\n119    Adelie Torgersen     35.7     17.0         189      3350 female 2009\n120    Adelie Torgersen     41.1     18.6         189      3325   male 2009\n121    Adelie Torgersen     36.2     17.2         187      3150 female 2009\n122    Adelie Torgersen     37.7     19.8         198      3500   male 2009\n123    Adelie Torgersen     40.2     17.0         176      3450 female 2009\n124    Adelie Torgersen     41.4     18.5         202      3875   male 2009\n125    Adelie Torgersen     35.2     15.9         186      3050 female 2009\n126    Adelie Torgersen     40.6     19.0         199      4000   male 2009\n127    Adelie Torgersen     38.8     17.6         191      3275 female 2009\n128    Adelie Torgersen     41.5     18.3         195      4300   male 2009\n129    Adelie Torgersen     39.0     17.1         191      3050 female 2009\n130    Adelie Torgersen     44.1     18.0         210      4000   male 2009\n131    Adelie Torgersen     38.5     17.9         190      3325 female 2009\n132    Adelie Torgersen     43.1     19.2         197      3500   male 2009\n133    Adelie     Dream     36.8     18.5         193      3500 female 2009\n134    Adelie     Dream     37.5     18.5         199      4475   male 2009\n135    Adelie     Dream     38.1     17.6         187      3425 female 2009\n136    Adelie     Dream     41.1     17.5         190      3900   male 2009\n137    Adelie     Dream     35.6     17.5         191      3175 female 2009\n138    Adelie     Dream     40.2     20.1         200      3975   male 2009\n139    Adelie     Dream     37.0     16.5         185      3400 female 2009\n140    Adelie     Dream     39.7     17.9         193      4250   male 2009\n141    Adelie     Dream     40.2     17.1         193      3400 female 2009\n142    Adelie     Dream     40.6     17.2         187      3475   male 2009\n143    Adelie     Dream     32.1     15.5         188      3050 female 2009\n144    Adelie     Dream     40.7     17.0         190      3725   male 2009\n145    Adelie     Dream     37.3     16.8         192      3000 female 2009\n146    Adelie     Dream     39.0     18.7         185      3650   male 2009\n147    Adelie     Dream     39.2     18.6         190      4250   male 2009\n148    Adelie     Dream     36.6     18.4         184      3475 female 2009\n149    Adelie     Dream     36.0     17.8         195      3450 female 2009\n150    Adelie     Dream     37.8     18.1         193      3750   male 2009\n151    Adelie     Dream     36.0     17.1         187      3700 female 2009\n152    Adelie     Dream     41.5     18.5         201      4000   male 2009\n153    Gentoo    Biscoe     46.1     13.2         211      4500 female 2007\n154    Gentoo    Biscoe     50.0     16.3         230      5700   male 2007\n155    Gentoo    Biscoe     48.7     14.1         210      4450 female 2007\n156    Gentoo    Biscoe     50.0     15.2         218      5700   male 2007\n157    Gentoo    Biscoe     47.6     14.5         215      5400   male 2007\n158    Gentoo    Biscoe     46.5     13.5         210      4550 female 2007\n159    Gentoo    Biscoe     45.4     14.6         211      4800 female 2007\n160    Gentoo    Biscoe     46.7     15.3         219      5200   male 2007\n161    Gentoo    Biscoe     43.3     13.4         209      4400 female 2007\n162    Gentoo    Biscoe     46.8     15.4         215      5150   male 2007\n163    Gentoo    Biscoe     40.9     13.7         214      4650 female 2007\n164    Gentoo    Biscoe     49.0     16.1         216      5550   male 2007\n165    Gentoo    Biscoe     45.5     13.7         214      4650 female 2007\n166    Gentoo    Biscoe     48.4     14.6         213      5850   male 2007\n167    Gentoo    Biscoe     45.8     14.6         210      4200 female 2007\n168    Gentoo    Biscoe     49.3     15.7         217      5850   male 2007\n169    Gentoo    Biscoe     42.0     13.5         210      4150 female 2007\n170    Gentoo    Biscoe     49.2     15.2         221      6300   male 2007\n171    Gentoo    Biscoe     46.2     14.5         209      4800 female 2007\n172    Gentoo    Biscoe     48.7     15.1         222      5350   male 2007\n173    Gentoo    Biscoe     50.2     14.3         218      5700   male 2007\n174    Gentoo    Biscoe     45.1     14.5         215      5000 female 2007\n175    Gentoo    Biscoe     46.5     14.5         213      4400 female 2007\n176    Gentoo    Biscoe     46.3     15.8         215      5050   male 2007\n177    Gentoo    Biscoe     42.9     13.1         215      5000 female 2007\n178    Gentoo    Biscoe     46.1     15.1         215      5100   male 2007\n179    Gentoo    Biscoe     44.5     14.3         216      4100   &lt;NA&gt; 2007\n180    Gentoo    Biscoe     47.8     15.0         215      5650   male 2007\n181    Gentoo    Biscoe     48.2     14.3         210      4600 female 2007\n182    Gentoo    Biscoe     50.0     15.3         220      5550   male 2007\n183    Gentoo    Biscoe     47.3     15.3         222      5250   male 2007\n184    Gentoo    Biscoe     42.8     14.2         209      4700 female 2007\n185    Gentoo    Biscoe     45.1     14.5         207      5050 female 2007\n186    Gentoo    Biscoe     59.6     17.0         230      6050   male 2007\n187    Gentoo    Biscoe     49.1     14.8         220      5150 female 2008\n188    Gentoo    Biscoe     48.4     16.3         220      5400   male 2008\n189    Gentoo    Biscoe     42.6     13.7         213      4950 female 2008\n190    Gentoo    Biscoe     44.4     17.3         219      5250   male 2008\n191    Gentoo    Biscoe     44.0     13.6         208      4350 female 2008\n192    Gentoo    Biscoe     48.7     15.7         208      5350   male 2008\n193    Gentoo    Biscoe     42.7     13.7         208      3950 female 2008\n194    Gentoo    Biscoe     49.6     16.0         225      5700   male 2008\n195    Gentoo    Biscoe     45.3     13.7         210      4300 female 2008\n196    Gentoo    Biscoe     49.6     15.0         216      4750   male 2008\n197    Gentoo    Biscoe     50.5     15.9         222      5550   male 2008\n198    Gentoo    Biscoe     43.6     13.9         217      4900 female 2008\n199    Gentoo    Biscoe     45.5     13.9         210      4200 female 2008\n200    Gentoo    Biscoe     50.5     15.9         225      5400   male 2008\n201    Gentoo    Biscoe     44.9     13.3         213      5100 female 2008\n202    Gentoo    Biscoe     45.2     15.8         215      5300   male 2008\n203    Gentoo    Biscoe     46.6     14.2         210      4850 female 2008\n204    Gentoo    Biscoe     48.5     14.1         220      5300   male 2008\n205    Gentoo    Biscoe     45.1     14.4         210      4400 female 2008\n206    Gentoo    Biscoe     50.1     15.0         225      5000   male 2008\n207    Gentoo    Biscoe     46.5     14.4         217      4900 female 2008\n208    Gentoo    Biscoe     45.0     15.4         220      5050   male 2008\n209    Gentoo    Biscoe     43.8     13.9         208      4300 female 2008\n210    Gentoo    Biscoe     45.5     15.0         220      5000   male 2008\n211    Gentoo    Biscoe     43.2     14.5         208      4450 female 2008\n212    Gentoo    Biscoe     50.4     15.3         224      5550   male 2008\n213    Gentoo    Biscoe     45.3     13.8         208      4200 female 2008\n214    Gentoo    Biscoe     46.2     14.9         221      5300   male 2008\n215    Gentoo    Biscoe     45.7     13.9         214      4400 female 2008\n216    Gentoo    Biscoe     54.3     15.7         231      5650   male 2008\n217    Gentoo    Biscoe     45.8     14.2         219      4700 female 2008\n218    Gentoo    Biscoe     49.8     16.8         230      5700   male 2008\n219    Gentoo    Biscoe     46.2     14.4         214      4650   &lt;NA&gt; 2008\n220    Gentoo    Biscoe     49.5     16.2         229      5800   male 2008\n221    Gentoo    Biscoe     43.5     14.2         220      4700 female 2008\n222    Gentoo    Biscoe     50.7     15.0         223      5550   male 2008\n223    Gentoo    Biscoe     47.7     15.0         216      4750 female 2008\n224    Gentoo    Biscoe     46.4     15.6         221      5000   male 2008\n225    Gentoo    Biscoe     48.2     15.6         221      5100   male 2008\n226    Gentoo    Biscoe     46.5     14.8         217      5200 female 2008\n227    Gentoo    Biscoe     46.4     15.0         216      4700 female 2008\n228    Gentoo    Biscoe     48.6     16.0         230      5800   male 2008\n229    Gentoo    Biscoe     47.5     14.2         209      4600 female 2008\n230    Gentoo    Biscoe     51.1     16.3         220      6000   male 2008\n231    Gentoo    Biscoe     45.2     13.8         215      4750 female 2008\n232    Gentoo    Biscoe     45.2     16.4         223      5950   male 2008\n233    Gentoo    Biscoe     49.1     14.5         212      4625 female 2009\n234    Gentoo    Biscoe     52.5     15.6         221      5450   male 2009\n235    Gentoo    Biscoe     47.4     14.6         212      4725 female 2009\n236    Gentoo    Biscoe     50.0     15.9         224      5350   male 2009\n237    Gentoo    Biscoe     44.9     13.8         212      4750 female 2009\n238    Gentoo    Biscoe     50.8     17.3         228      5600   male 2009\n239    Gentoo    Biscoe     43.4     14.4         218      4600 female 2009\n240    Gentoo    Biscoe     51.3     14.2         218      5300   male 2009\n241    Gentoo    Biscoe     47.5     14.0         212      4875 female 2009\n242    Gentoo    Biscoe     52.1     17.0         230      5550   male 2009\n243    Gentoo    Biscoe     47.5     15.0         218      4950 female 2009\n244    Gentoo    Biscoe     52.2     17.1         228      5400   male 2009\n245    Gentoo    Biscoe     45.5     14.5         212      4750 female 2009\n246    Gentoo    Biscoe     49.5     16.1         224      5650   male 2009\n247    Gentoo    Biscoe     44.5     14.7         214      4850 female 2009\n248    Gentoo    Biscoe     50.8     15.7         226      5200   male 2009\n249    Gentoo    Biscoe     49.4     15.8         216      4925   male 2009\n250    Gentoo    Biscoe     46.9     14.6         222      4875 female 2009\n251    Gentoo    Biscoe     48.4     14.4         203      4625 female 2009\n252    Gentoo    Biscoe     51.1     16.5         225      5250   male 2009\n253    Gentoo    Biscoe     48.5     15.0         219      4850 female 2009\n254    Gentoo    Biscoe     55.9     17.0         228      5600   male 2009\n255    Gentoo    Biscoe     47.2     15.5         215      4975 female 2009\n256    Gentoo    Biscoe     49.1     15.0         228      5500   male 2009\n257    Gentoo    Biscoe     47.3     13.8         216      4725   &lt;NA&gt; 2009\n258    Gentoo    Biscoe     46.8     16.1         215      5500   male 2009\n259    Gentoo    Biscoe     41.7     14.7         210      4700 female 2009\n260    Gentoo    Biscoe     53.4     15.8         219      5500   male 2009\n261    Gentoo    Biscoe     43.3     14.0         208      4575 female 2009\n262    Gentoo    Biscoe     48.1     15.1         209      5500   male 2009\n263    Gentoo    Biscoe     50.5     15.2         216      5000 female 2009\n264    Gentoo    Biscoe     49.8     15.9         229      5950   male 2009\n265    Gentoo    Biscoe     43.5     15.2         213      4650 female 2009\n266    Gentoo    Biscoe     51.5     16.3         230      5500   male 2009\n267    Gentoo    Biscoe     46.2     14.1         217      4375 female 2009\n268    Gentoo    Biscoe     55.1     16.0         230      5850   male 2009\n269    Gentoo    Biscoe     44.5     15.7         217      4875   &lt;NA&gt; 2009\n270    Gentoo    Biscoe     48.8     16.2         222      6000   male 2009\n271    Gentoo    Biscoe     47.2     13.7         214      4925 female 2009\n272    Gentoo    Biscoe       NA       NA          NA        NA   &lt;NA&gt; 2009\n273    Gentoo    Biscoe     46.8     14.3         215      4850 female 2009\n274    Gentoo    Biscoe     50.4     15.7         222      5750   male 2009\n275    Gentoo    Biscoe     45.2     14.8         212      5200 female 2009\n276    Gentoo    Biscoe     49.9     16.1         213      5400   male 2009\n277 Chinstrap     Dream     46.5     17.9         192      3500 female 2007\n278 Chinstrap     Dream     50.0     19.5         196      3900   male 2007\n279 Chinstrap     Dream     51.3     19.2         193      3650   male 2007\n280 Chinstrap     Dream     45.4     18.7         188      3525 female 2007\n281 Chinstrap     Dream     52.7     19.8         197      3725   male 2007\n282 Chinstrap     Dream     45.2     17.8         198      3950 female 2007\n283 Chinstrap     Dream     46.1     18.2         178      3250 female 2007\n284 Chinstrap     Dream     51.3     18.2         197      3750   male 2007\n285 Chinstrap     Dream     46.0     18.9         195      4150 female 2007\n286 Chinstrap     Dream     51.3     19.9         198      3700   male 2007\n287 Chinstrap     Dream     46.6     17.8         193      3800 female 2007\n288 Chinstrap     Dream     51.7     20.3         194      3775   male 2007\n289 Chinstrap     Dream     47.0     17.3         185      3700 female 2007\n290 Chinstrap     Dream     52.0     18.1         201      4050   male 2007\n291 Chinstrap     Dream     45.9     17.1         190      3575 female 2007\n292 Chinstrap     Dream     50.5     19.6         201      4050   male 2007\n293 Chinstrap     Dream     50.3     20.0         197      3300   male 2007\n294 Chinstrap     Dream     58.0     17.8         181      3700 female 2007\n295 Chinstrap     Dream     46.4     18.6         190      3450 female 2007\n296 Chinstrap     Dream     49.2     18.2         195      4400   male 2007\n297 Chinstrap     Dream     42.4     17.3         181      3600 female 2007\n298 Chinstrap     Dream     48.5     17.5         191      3400   male 2007\n299 Chinstrap     Dream     43.2     16.6         187      2900 female 2007\n300 Chinstrap     Dream     50.6     19.4         193      3800   male 2007\n301 Chinstrap     Dream     46.7     17.9         195      3300 female 2007\n302 Chinstrap     Dream     52.0     19.0         197      4150   male 2007\n303 Chinstrap     Dream     50.5     18.4         200      3400 female 2008\n304 Chinstrap     Dream     49.5     19.0         200      3800   male 2008\n305 Chinstrap     Dream     46.4     17.8         191      3700 female 2008\n306 Chinstrap     Dream     52.8     20.0         205      4550   male 2008\n307 Chinstrap     Dream     40.9     16.6         187      3200 female 2008\n308 Chinstrap     Dream     54.2     20.8         201      4300   male 2008\n309 Chinstrap     Dream     42.5     16.7         187      3350 female 2008\n310 Chinstrap     Dream     51.0     18.8         203      4100   male 2008\n311 Chinstrap     Dream     49.7     18.6         195      3600   male 2008\n312 Chinstrap     Dream     47.5     16.8         199      3900 female 2008\n313 Chinstrap     Dream     47.6     18.3         195      3850 female 2008\n314 Chinstrap     Dream     52.0     20.7         210      4800   male 2008\n315 Chinstrap     Dream     46.9     16.6         192      2700 female 2008\n316 Chinstrap     Dream     53.5     19.9         205      4500   male 2008\n317 Chinstrap     Dream     49.0     19.5         210      3950   male 2008\n318 Chinstrap     Dream     46.2     17.5         187      3650 female 2008\n319 Chinstrap     Dream     50.9     19.1         196      3550   male 2008\n320 Chinstrap     Dream     45.5     17.0         196      3500 female 2008\n321 Chinstrap     Dream     50.9     17.9         196      3675 female 2009\n322 Chinstrap     Dream     50.8     18.5         201      4450   male 2009\n323 Chinstrap     Dream     50.1     17.9         190      3400 female 2009\n324 Chinstrap     Dream     49.0     19.6         212      4300   male 2009\n325 Chinstrap     Dream     51.5     18.7         187      3250   male 2009\n326 Chinstrap     Dream     49.8     17.3         198      3675 female 2009\n327 Chinstrap     Dream     48.1     16.4         199      3325 female 2009\n328 Chinstrap     Dream     51.4     19.0         201      3950   male 2009\n329 Chinstrap     Dream     45.7     17.3         193      3600 female 2009\n330 Chinstrap     Dream     50.7     19.7         203      4050   male 2009\n331 Chinstrap     Dream     42.5     17.3         187      3350 female 2009\n332 Chinstrap     Dream     52.2     18.8         197      3450   male 2009\n333 Chinstrap     Dream     45.2     16.6         191      3250 female 2009\n334 Chinstrap     Dream     49.3     19.9         203      4050   male 2009\n335 Chinstrap     Dream     50.2     18.8         202      3800   male 2009\n336 Chinstrap     Dream     45.6     19.4         194      3525 female 2009\n337 Chinstrap     Dream     51.9     19.5         206      3950   male 2009\n338 Chinstrap     Dream     46.8     16.5         189      3650 female 2009\n339 Chinstrap     Dream     45.7     17.0         195      3650 female 2009\n340 Chinstrap     Dream     55.8     19.8         207      4000   male 2009\n341 Chinstrap     Dream     43.5     18.1         202      3400 female 2009\n342 Chinstrap     Dream     49.6     18.2         193      3775   male 2009\n343 Chinstrap     Dream     50.8     19.0         210      4100   male 2009\n344 Chinstrap     Dream     50.2     18.7         198      3775 female 2009"
  },
  {
    "objectID": "slides/01-intro/index.html#datasetspenguins-vs-palmerpenguinspenguins",
    "href": "slides/01-intro/index.html#datasetspenguins-vs-palmerpenguinspenguins",
    "title": "Introduction to R and RStudio",
    "section": "datasets::penguins vs palmerpenguins::penguins",
    "text": "datasets::penguins vs palmerpenguins::penguins\n\ncolnames(penguins)\n\n[1] \"species\"     \"island\"      \"bill_len\"    \"bill_dep\"    \"flipper_len\"\n[6] \"body_mass\"   \"sex\"         \"year\"       \n\n\n\ncolnames(palmerpenguins::penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n\n\n\n\n\n\ndatasets\npalmerpenguins\n\n\n\n\nbill_len\nbill_length_mm\n\n\nbill_dep\nbill_depth_mm\n\n\nflipper_len\nflipper_length_mm\n\n\nbody_mass\nbody_mass_g"
  },
  {
    "objectID": "slides/01-intro/index.html#how-many-of-each-species",
    "href": "slides/01-intro/index.html#how-many-of-each-species",
    "title": "Introduction to R and RStudio",
    "section": "How many of each species?",
    "text": "How many of each species?\n\nlibrary(tidyverse)\ncount(penguins, species)\n\n    species   n\n1    Adelie 152\n2 Chinstrap  68\n3    Gentoo 124"
  },
  {
    "objectID": "slides/01-intro/index.html#how-many-of-each-species-on-each-island",
    "href": "slides/01-intro/index.html#how-many-of-each-species-on-each-island",
    "title": "Introduction to R and RStudio",
    "section": "How many of each species on each island?",
    "text": "How many of each species on each island?\n\ncount(penguins, species, island, .drop = FALSE)\n\n    species    island   n\n1    Adelie    Biscoe  44\n2    Adelie     Dream  56\n3    Adelie Torgersen  52\n4 Chinstrap    Biscoe   0\n5 Chinstrap     Dream  68\n6 Chinstrap Torgersen   0\n7    Gentoo    Biscoe 124\n8    Gentoo     Dream   0\n9    Gentoo Torgersen   0"
  },
  {
    "objectID": "slides/01-intro/index.html#show-me-the-bill-dimensions-of-the-5-heaviest-female-gentoo-penguins",
    "href": "slides/01-intro/index.html#show-me-the-bill-dimensions-of-the-5-heaviest-female-gentoo-penguins",
    "title": "Introduction to R and RStudio",
    "section": "Show me the bill dimensions of the 5 heaviest female Gentoo penguins",
    "text": "Show me the bill dimensions of the 5 heaviest female Gentoo penguins\n\npenguins |&gt;\n  filter(sex == \"female\",\n         species == \"Gentoo\") |&gt;\n  slice_max(body_mass, n = 5) |&gt;\n  select(contains(\"bill\"))\n\n  bill_len bill_dep\n1     46.5     14.8\n2     45.2     14.8\n3     49.1     14.8\n4     44.9     13.3\n5     45.1     14.5"
  },
  {
    "objectID": "slides/01-intro/index.html#the-native-pipe",
    "href": "slides/01-intro/index.html#the-native-pipe",
    "title": "Introduction to R and RStudio",
    "section": "The native pipe",
    "text": "The native pipe\n|&gt; is a pipe.\nIt passes what comes before into the first argument of what comes after.\nPipes are a powerful tool for clearly expressing a sequence of multiple operations.\nWe’ll talk more about pipes in the data wrangling session."
  },
  {
    "objectID": "slides/01-intro/index.html#whats-the-mean-bill-length-by-species",
    "href": "slides/01-intro/index.html#whats-the-mean-bill-length-by-species",
    "title": "Introduction to R and RStudio",
    "section": "What’s the mean bill length, by species?",
    "text": "What’s the mean bill length, by species?\n\npenguins |&gt;\n  summarise(mean_bill_length = mean(bill_len, na.rm = TRUE),\n            .by = species)\n\n    species mean_bill_length\n1    Adelie         38.79139\n2    Gentoo         47.50488\n3 Chinstrap         48.83382"
  },
  {
    "objectID": "slides/01-intro/index.html#whats-the-relationship-between-bill-length-and-depth",
    "href": "slides/01-intro/index.html#whats-the-relationship-between-bill-length-and-depth",
    "title": "Introduction to R and RStudio",
    "section": "What’s the relationship between bill length and depth?",
    "text": "What’s the relationship between bill length and depth?\n\npictureplot 1code 1plot 2code 2what?!\n\n\n\n\n\nArtwork by Allison Horst https://allisonhorst.github.io/palmerpenguins/articles/art.html\n\n\n\n\n\n\n\n\nggplot(data = penguins,\n       aes(x = bill_len,\n           y = bill_dep)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"gray50\") +\n  labs(title = \"Penguin bill dimensions\",\n       subtitle = \"Negative correlation between bill length and depth for Penguins at Palmer Station LTER\",\n       x = \"Bill length (mm)\",\n       y = \"Bill depth (mm)\") +\n  theme_minimal() + \n  theme(plot.title.position = \"plot\")\n\n\n\n\n\n\n\nggplot(data = penguins,\n       aes(x = bill_len,\n           y = bill_dep,\n           group = species)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin bill dimensions\",\n       subtitle = \"Positive correlation between bill length and depth for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER\",\n       x = \"Bill length (mm)\",\n       y = \"Bill depth (mm)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme_minimal() +\n  theme(plot.title.position = \"plot\",\n        plot.subtitle = element_text(size = rel(0.95)))\n\n\n\nThis is an illustration of Simpson’s Paradox.\n\nSimpson’s paradox is a phenomenon in probability and statistics in which a trend appears in several groups of data but disappears or reverses when the groups are combined.\n\n\n\n\nExample adapted from https://allisonhorst.github.io/palmerpenguins/articles/examples.html"
  },
  {
    "objectID": "slides/01-intro/index.html#within-r-help-with-functions",
    "href": "slides/01-intro/index.html#within-r-help-with-functions",
    "title": "Introduction to R and RStudio",
    "section": "Within R: Help with functions",
    "text": "Within R: Help with functions\n\n# help with a specific function\nhelp(function_name)\n?function_name\n\n# quick reminder of the function arguments\narg(function_name)\n\n# see an example\nexample(function_name)\n\n# see the source code\n## in console\nfunction_name\n## in View pane (easier to read, syntax highlighting)\nView(function_name)"
  },
  {
    "objectID": "slides/01-intro/index.html#within-r-help.search",
    "href": "slides/01-intro/index.html#within-r-help.search",
    "title": "Introduction to R and RStudio",
    "section": "Within R: help.search",
    "text": "Within R: help.search\n\n# when ?function_name fails (e.g. don't have package loaded)\nhelp.search(\"function_name\") # note quotation marks\n??function_name\n\n# for when you can't quite remember the function name\n??something_like_function_name\n\n# R help start page\nhelp.start()\n## note that using the RStudio Help home button gives even more resources"
  },
  {
    "objectID": "slides/01-intro/index.html#within-r-help-with-package",
    "href": "slides/01-intro/index.html#within-r-help-with-package",
    "title": "Introduction to R and RStudio",
    "section": "Within R: Help with package",
    "text": "Within R: Help with package\n\n# `help`\nhelp(package = \"package_name\")\n# Help panel in RStudio will give links to all documentation\n# and help pages for that package\n\n# find/browse vignettes for installed (or specific) packages\nbrowseVignettes()\nbrowseVignettes(\"package_name\")\n\n# use auto-completion in RStudio to see what functions \n# are in a package\n?package::\n\ndplyr demo\nRStudio Help home demo"
  },
  {
    "objectID": "slides/01-intro/index.html#getting-help-at-warwick",
    "href": "slides/01-intro/index.html#getting-help-at-warwick",
    "title": "Introduction to R and RStudio",
    "section": "Getting help at Warwick",
    "text": "Getting help at Warwick\n\nThe Warwick R Users Viva Engage"
  },
  {
    "objectID": "slides/01-intro/index.html#resources",
    "href": "slides/01-intro/index.html#resources",
    "title": "Introduction to R and RStudio",
    "section": "Resources",
    "text": "Resources\nMaterial inspired by and remixed from:\n\nhttps://www.heatherturner.net/teaching/zero-to-hero/#1\nhttps://ellakaye.github.io/Rladies-Coventry-getting-help-in-R/getting_help_in_R.html#1\nhttps://portal.stats.ox.ac.uk/userdata/ruth/APTS2013/Rcourse1.pdf\nhttps://carpentries-incubator.github.io/r-tidyverse-4-datasets/"
  },
  {
    "objectID": "slides/01-intro/index.html#license",
    "href": "slides/01-intro/index.html#license",
    "title": "Introduction to R and RStudio",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/05-graphics/index.html#overview",
    "href": "slides/05-graphics/index.html#overview",
    "title": "Graphics",
    "section": "Overview",
    "text": "Overview\n\nPlots in base R\nggplot2\nTables"
  },
  {
    "objectID": "slides/05-graphics/index.html#packages",
    "href": "slides/05-graphics/index.html#packages",
    "title": "Graphics",
    "section": "Packages",
    "text": "Packages\n\nlibrary(ggplot2) # for later in the session\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/05-graphics/index.html#no-frills",
    "href": "slides/05-graphics/index.html#no-frills",
    "title": "Graphics",
    "section": "No frills",
    "text": "No frills\nBase R graphics are useful for quick, exploratory “no-frills” plots.\n(For anything better looking or more complex or where you want more control, use ggplot2)"
  },
  {
    "objectID": "slides/05-graphics/index.html#boxplots",
    "href": "slides/05-graphics/index.html#boxplots",
    "title": "Graphics",
    "section": "Boxplots",
    "text": "Boxplots\n\nExample 1Example 2\n\n\n\nboxplot(penguins$body_mass_g)\n\n\n\n\n\n\n\n\n\n\n\nwith(penguins, boxplot(body_mass_g ~ species))"
  },
  {
    "objectID": "slides/05-graphics/index.html#histogramdensity",
    "href": "slides/05-graphics/index.html#histogramdensity",
    "title": "Graphics",
    "section": "Histogram/Density",
    "text": "Histogram/Density\n\nHistogramDensity\n\n\n\nhist(penguins$body_mass_g)\n\n\n\n\n\n\n\n\n\n\n\nplot(density(penguins$body_mass_g, na.rm = TRUE))"
  },
  {
    "objectID": "slides/05-graphics/index.html#scatterplots",
    "href": "slides/05-graphics/index.html#scatterplots",
    "title": "Graphics",
    "section": "Scatterplots",
    "text": "Scatterplots\n\nVectorsData frame\n\n\n\nplot(1:10, 1:10)\n\n\n\n\n\n\n\n\n\n\n\nplot(bill_length_mm ~ bill_depth_mm, \n     data = penguins)"
  },
  {
    "objectID": "slides/05-graphics/index.html#plot-methods",
    "href": "slides/05-graphics/index.html#plot-methods",
    "title": "Graphics",
    "section": "Plot methods",
    "text": "Plot methods\nMany different objects in R have defined plot methods:\n\nmethods(plot)\n\n [1] plot.acf*            plot.data.frame*     plot.decomposed.ts* \n [4] plot.default         plot.dendrogram*     plot.density*       \n [7] plot.ecdf            plot.factor*         plot.formula*       \n[10] plot.function        plot.ggplot*         plot.gtable*        \n[13] plot.hclust*         plot.histogram*      plot.HoltWinters*   \n[16] plot.isoreg*         plot.lm*             plot.medpolish*     \n[19] plot.mlm*            plot.pal_continuous* plot.pal_discrete*  \n[22] plot.ppr*            plot.prcomp*         plot.princomp*      \n[25] plot.profile*        plot.profile.nls*    plot.R6*            \n[28] plot.raster*         plot.spec*           plot.stepfun        \n[31] plot.stl*            plot.table*          plot.transform*     \n[34] plot.ts              plot.tskernel*       plot.TukeyHSD*      \nsee '?methods' for accessing help and source code\n\n\ne.g. if you call plot on an object of type lm, it will call plot.lm"
  },
  {
    "objectID": "slides/05-graphics/index.html#linear-model-diagnostic-fits",
    "href": "slides/05-graphics/index.html#linear-model-diagnostic-fits",
    "title": "Graphics",
    "section": "Linear model diagnostic fits",
    "text": "Linear model diagnostic fits\n\nfit &lt;- lm(bill_length_mm ~ bill_depth_mm, \n          data = penguins, subset = species == \"Gentoo\")\n\npar(mfrow=c(2,2)) # see all four plots together\nplot(fit)"
  },
  {
    "objectID": "slides/05-graphics/index.html#your-turn",
    "href": "slides/05-graphics/index.html#your-turn",
    "title": "Graphics",
    "section": "Your turn!",
    "text": "Your turn!\nFrom the starting point of plot(1:10, 1:10), experiment with the arguments type and pch. See ?plot\nCan you create a plot with triangular points linked by lines?\nCan you do the same with the lines() function? What are the similarities and differences?"
  },
  {
    "objectID": "slides/05-graphics/index.html#intro-to-ggplot2",
    "href": "slides/05-graphics/index.html#intro-to-ggplot2",
    "title": "Graphics",
    "section": "Intro to ggplot2",
    "text": "Intro to ggplot2\nFrom https://ggplot2.tidyverse.org:\n\nR has several systems for making graphs, but ggplot2 is one of the most elegant and most versatile. ggplot2 implements the grammar of graphics, a coherent system for describing and building graphs. With ggplot2, you can do more faster by learning one system and applying it in many places.\n\nFrom https://r4ds.had.co.nz/data-visualisation.html:\n\nYou provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details."
  },
  {
    "objectID": "slides/05-graphics/index.html#ggplot2-usage",
    "href": "slides/05-graphics/index.html#ggplot2-usage",
    "title": "Graphics",
    "section": "ggplot2 usage",
    "text": "ggplot2 usage\n\nggplot2 is part of the tidyverse.\nIt has been around for over 10 years and is used by hundreds of thousands of people.\nIt can take some getting used to, but is worth the investment to learn properly"
  },
  {
    "objectID": "slides/05-graphics/index.html#ggplot2-key-components",
    "href": "slides/05-graphics/index.html#ggplot2-key-components",
    "title": "Graphics",
    "section": "ggplot2 key components",
    "text": "ggplot2 key components\nEvery ggplot2 plot has three key components:\n\nData (typically in a data frame),\nA set of aesthetic mappings between variables in the data and visual properties, and\nAt least one layer which describes how to render each observation. Layers are usually created with a geom_ function."
  },
  {
    "objectID": "slides/05-graphics/index.html#cake",
    "href": "slides/05-graphics/index.html#cake",
    "title": "Graphics",
    "section": "Cake!",
    "text": "Cake!\n\nImage credit: Tanya Shapiro"
  },
  {
    "objectID": "slides/05-graphics/index.html#initiate-with-data",
    "href": "slides/05-graphics/index.html#initiate-with-data",
    "title": "Graphics",
    "section": "Initiate with data",
    "text": "Initiate with data\nPackage is ggplot2 but function is ggplot()\n\nggplot(penguins)"
  },
  {
    "objectID": "slides/05-graphics/index.html#add-aesthetics",
    "href": "slides/05-graphics/index.html#add-aesthetics",
    "title": "Graphics",
    "section": "Add aesthetics",
    "text": "Add aesthetics\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm))"
  },
  {
    "objectID": "slides/05-graphics/index.html#add-points",
    "href": "slides/05-graphics/index.html#add-points",
    "title": "Graphics",
    "section": "Add points",
    "text": "Add points\nLayers are added with + (not %&gt;% or |&gt;)\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point()"
  },
  {
    "objectID": "slides/05-graphics/index.html#careful-what-goes-in-aes",
    "href": "slides/05-graphics/index.html#careful-what-goes-in-aes",
    "title": "Graphics",
    "section": "Careful what goes in aes()",
    "text": "Careful what goes in aes()\n\n\n\nggplot(penguins, \n       aes(x = bill_length_mm, \n           y = bill_depth_mm)) +\n  geom_point(aes(color = \"blue\"))\n\n\n\n\n\n\n\n\n\n\nggplot(penguins, \n       aes(x = bill_length_mm, \n           y = bill_depth_mm)) +\n  geom_point(color = \"blue\")"
  },
  {
    "objectID": "slides/05-graphics/index.html#when-you-do-want-to-map-a-colour-to-data",
    "href": "slides/05-graphics/index.html#when-you-do-want-to-map-a-colour-to-data",
    "title": "Graphics",
    "section": "When you do want to map a colour to data",
    "text": "When you do want to map a colour to data\n\nplotcode\n\n\n\n\n\n\nggplot(data = penguins,\n       aes(x = bill_length_mm,\n           y = bill_depth_mm,\n           group = species)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8)\n\nNote that color and shape are inside aes() but size and alpha are outside."
  },
  {
    "objectID": "slides/05-graphics/index.html#add-additional-geoms",
    "href": "slides/05-graphics/index.html#add-additional-geoms",
    "title": "Graphics",
    "section": "Add additional geoms",
    "text": "Add additional geoms\n\nplotcode\n\n\n\n\n\n\nggplot(data = penguins,\n       aes(x = bill_length_mm,\n           y = bill_depth_mm,\n           group = species)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", aes(color = species))"
  },
  {
    "objectID": "slides/05-graphics/index.html#scales-in-ggplot2",
    "href": "slides/05-graphics/index.html#scales-in-ggplot2",
    "title": "Graphics",
    "section": "Scales in ggplot2",
    "text": "Scales in ggplot2\n\nScales in ggplot2 control the mapping from data to aesthetics. They take your data and turn it into something that you can see, like size, colour, position or shape. They also provide the tools that let you interpret the plot: the axes and legends.\n\nThree groups of scales:\n\nposition scales and axes\ncolour scales and legends\nscales for other aesthetics"
  },
  {
    "objectID": "slides/05-graphics/index.html#add-a-colour-scale",
    "href": "slides/05-graphics/index.html#add-a-colour-scale",
    "title": "Graphics",
    "section": "Add a colour scale",
    "text": "Add a colour scale\n\nplotcode\n\n\n\n\n\n\nggplot(data = penguins,\n       aes(x = bill_length_mm,\n           y = bill_depth_mm,\n           group = species)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\"))"
  },
  {
    "objectID": "slides/05-graphics/index.html#facets",
    "href": "slides/05-graphics/index.html#facets",
    "title": "Graphics",
    "section": "Facets",
    "text": "Facets\n\nplot 1code 1plot 2code 2\n\n\n\n\n\n\nggplot(data = penguins,\n       aes(x = bill_length_mm,\n           y = bill_depth_mm,\n           group = species)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  facet_wrap(~species)\n\n\n\n\n\n\n\nggplot(data = penguins,\n       aes(x = bill_length_mm,\n           y = bill_depth_mm,\n           group = species)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  facet_wrap(~species, scales = \"free_x\")"
  },
  {
    "objectID": "slides/05-graphics/index.html#add-theme-elements",
    "href": "slides/05-graphics/index.html#add-theme-elements",
    "title": "Graphics",
    "section": "Add theme elements",
    "text": "Add theme elements\n\nplotcode\n\n\n\n\n\n\nggplot(data = penguins,\n       aes(x = bill_length_mm,\n           y = bill_depth_mm,\n           group = species)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin bill dimensions\",\n       x = \"bill length (mm)\",\n       y = \"bill depth (mm)\") +\n  theme_minimal() + \n  theme(plot.title.position = \"plot\",\n        text = element_text(size = 20))"
  },
  {
    "objectID": "slides/05-graphics/index.html#your-turn-1",
    "href": "slides/05-graphics/index.html#your-turn-1",
    "title": "Graphics",
    "section": "Your turn!",
    "text": "Your turn!\nRecreate the base R plots from the first part of this session in ggplot2.\nYou may find the list of available geoms (and their help pages) useful:\nhttps://ggplot2.tidyverse.org/reference/index.html#layers"
  },
  {
    "objectID": "slides/05-graphics/index.html#boxplot-1",
    "href": "slides/05-graphics/index.html#boxplot-1",
    "title": "Graphics",
    "section": "Boxplot 1",
    "text": "Boxplot 1\n\nggplot(penguins) +\n  geom_boxplot(aes(y = body_mass_g))\n\n\nNotes\n\naes() can be defined for the whole plot or in the geom\nfirst arguments to aes() are x and y (don’t need to name them if using them in that order)"
  },
  {
    "objectID": "slides/05-graphics/index.html#boxplot-2",
    "href": "slides/05-graphics/index.html#boxplot-2",
    "title": "Graphics",
    "section": "Boxplot 2",
    "text": "Boxplot 2\n\nggplot(penguins) +\n  geom_boxplot(aes(species, body_mass_g))"
  },
  {
    "objectID": "slides/05-graphics/index.html#histogram-1",
    "href": "slides/05-graphics/index.html#histogram-1",
    "title": "Graphics",
    "section": "Histogram",
    "text": "Histogram\n\nggplot(penguins) +\n  geom_histogram(aes(body_mass_g), \n                 binwidth = 500)"
  },
  {
    "objectID": "slides/05-graphics/index.html#density-1",
    "href": "slides/05-graphics/index.html#density-1",
    "title": "Graphics",
    "section": "Density",
    "text": "Density\n\nggplot(penguins) +\n  geom_density(aes(body_mass_g))"
  },
  {
    "objectID": "slides/05-graphics/index.html#scatterplot-with-vectors",
    "href": "slides/05-graphics/index.html#scatterplot-with-vectors",
    "title": "Graphics",
    "section": "Scatterplot with vectors",
    "text": "Scatterplot with vectors\n\nggplot(data = NULL, aes(x = 1:10, y = 1:10)) +\n  geom_point()"
  },
  {
    "objectID": "slides/05-graphics/index.html#extensions",
    "href": "slides/05-graphics/index.html#extensions",
    "title": "Graphics",
    "section": "Extensions",
    "text": "Extensions\nSee extensions at https://exts.ggplot2.tidyverse.org/gallery/"
  },
  {
    "objectID": "slides/05-graphics/index.html#inspiration",
    "href": "slides/05-graphics/index.html#inspiration",
    "title": "Graphics",
    "section": "Inspiration",
    "text": "Inspiration\nR can be used to make incredible data visualisations.\nCheck out the galleries of these data viz practitioners working with ggplot2:\n\nCedric Scherer\nGeorgios Karamanis\nNicole Rennie\n\nAlso, #TidyTuesday on Mastodon is a great source for further inspiration"
  },
  {
    "objectID": "slides/05-graphics/index.html#ggplot2-resources",
    "href": "slides/05-graphics/index.html#ggplot2-resources",
    "title": "Graphics",
    "section": "ggplot2 resources",
    "text": "ggplot2 resources\n\nR for Data Science book: Chapters 3: Data Visualisation and 28: Graphics for Communication, to get up and running quickly\nggplot2 book, for an in-depth understanding\nPlotting anything with ggplot2 webinar with Thomas Lin Pederson (one of the main ggplot2 authors)\nR graphics cookbook, a practical guide that provides more than 150 recipes to help you generate high-quality graphs quickly\nCedric Scherer’s tutorial\nCedric Scherer’s ‘Engaging and Beautiful Data Visualizations with ggplot2’ workshop\nggplot2 reference"
  },
  {
    "objectID": "slides/05-graphics/index.html#data-visualisation-resources",
    "href": "slides/05-graphics/index.html#data-visualisation-resources",
    "title": "Graphics",
    "section": "Data visualisation resources",
    "text": "Data visualisation resources\nBooks about greating good data viz:\n\nData Visualisation: A practical Introduction by Kieran Healey\nFundamental’s of Data Visualisation by Claus Wilke"
  },
  {
    "objectID": "slides/05-graphics/index.html#viewing-and-saving-plots-in-rstudio",
    "href": "slides/05-graphics/index.html#viewing-and-saving-plots-in-rstudio",
    "title": "Graphics",
    "section": "Viewing and saving plots in RStudio",
    "text": "Viewing and saving plots in RStudio\nIn RStudio, graphs are displayed in the Plots window. The plot is sized to fit the window and will be rescaled if the size of the window is changed.\nBack and forward arrows allow you to navigate through graphs that have been plotted.\nPlots can be saved in various formats using the Export drop down menu, which also has an option to copy to the clipboard.\nDEMO"
  },
  {
    "objectID": "slides/05-graphics/index.html#getting-started-with-tables",
    "href": "slides/05-graphics/index.html#getting-started-with-tables",
    "title": "Graphics",
    "section": "Getting started with tables",
    "text": "Getting started with tables\nWe’re just going to scratch the surface of this today.\nWe’ll be using the gt and gtsummary packages, but there are many of other.\nHere’s a good overview of many different packages."
  },
  {
    "objectID": "slides/05-graphics/index.html#gt",
    "href": "slides/05-graphics/index.html#gt",
    "title": "Graphics",
    "section": "gt",
    "text": "gt\ngt is an R package to create tables. It provides a grammar of tables.\n\nThe gt philosophy: we can construct a wide variety of useful tables with a cohesive set of table parts. It all begins with table data (be it a tibble or a data frame). You then decide how to compose your gt table with the elements and formatting you need for the task at hand. Finally, the table is rendered by printing it at the console, including it in an R Markdown document, or exporting to a file using gtsave()"
  },
  {
    "objectID": "slides/05-graphics/index.html#parts-of-a-gt-table",
    "href": "slides/05-graphics/index.html#parts-of-a-gt-table",
    "title": "Graphics",
    "section": "Parts of a gt table",
    "text": "Parts of a gt table\n\nFrom https://gt.rstudio.com"
  },
  {
    "objectID": "slides/05-graphics/index.html#getting-started",
    "href": "slides/05-graphics/index.html#getting-started",
    "title": "Graphics",
    "section": "Getting started",
    "text": "Getting started\n\nlibrary(gt)\n\n# Define the start and end dates for the data range\nstart_date &lt;- \"2010-06-07\"\nend_date &lt;- \"2010-06-14\"\n\n# Create a gt table based on preprocessed `sp500` table data\nsp500 |&gt;\n  dplyr::filter(date &gt;= start_date & date &lt;= end_date) |&gt;\n  dplyr::select(-adj_close) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"S&P 500\",\n    subtitle = glue::glue(\"{start_date} to {end_date}\")\n  ) |&gt;\n  fmt_currency() |&gt;\n  fmt_date(columns = date, date_style = \"wd_m_day_year\") |&gt;\n  fmt_number(columns = volume, suffixing = TRUE)"
  },
  {
    "objectID": "slides/05-graphics/index.html#getting-started-output",
    "href": "slides/05-graphics/index.html#getting-started-output",
    "title": "Graphics",
    "section": "Getting started",
    "text": "Getting started\n\n\n\n\n\n\n\nS&P 500\n\n\n2010-06-07 to 2010-06-14\n\n\ndate\nopen\nhigh\nlow\nclose\nvolume\n\n\n\n\nMon, Jun 14, 2010\n$1,095.00\n$1,105.91\n$1,089.03\n$1,089.63\n4.43B\n\n\nFri, Jun 11, 2010\n$1,082.65\n$1,092.25\n$1,077.12\n$1,091.60\n4.06B\n\n\nThu, Jun 10, 2010\n$1,058.77\n$1,087.85\n$1,058.77\n$1,086.84\n5.14B\n\n\nWed, Jun 9, 2010\n$1,062.75\n$1,077.74\n$1,052.25\n$1,055.69\n5.98B\n\n\nTue, Jun 8, 2010\n$1,050.81\n$1,063.15\n$1,042.17\n$1,062.00\n6.19B\n\n\nMon, Jun 7, 2010\n$1,065.84\n$1,071.36\n$1,049.86\n$1,050.47\n5.47B"
  },
  {
    "objectID": "slides/05-graphics/index.html#an-example",
    "href": "slides/05-graphics/index.html#an-example",
    "title": "Graphics",
    "section": "An example",
    "text": "An example\n\nFrom Albert Rapp’s gt book"
  },
  {
    "objectID": "slides/05-graphics/index.html#resources",
    "href": "slides/05-graphics/index.html#resources",
    "title": "Graphics",
    "section": "Resources",
    "text": "Resources\nSee the article Case Study: gtcars for a thorough example of gt’s capabilities.\nSee also Albert Rapp’s book on gt."
  },
  {
    "objectID": "slides/05-graphics/index.html#your-turn-2",
    "href": "slides/05-graphics/index.html#your-turn-2",
    "title": "Graphics",
    "section": "Your turn!",
    "text": "Your turn!\nThe {gt} package comes with several built-in datasets, including exibble, a toy example tibble.\nInstall the {gt} package, look at exibble, then create a table of the data using {gt}.\nHow good can you get it looking? You can consult the reference section on the {gt} website to see all the options available."
  },
  {
    "objectID": "slides/05-graphics/index.html#guidelines-for-better-tables",
    "href": "slides/05-graphics/index.html#guidelines-for-better-tables",
    "title": "Graphics",
    "section": "Guidelines for better tables",
    "text": "Guidelines for better tables\nHaving the technical know-how to code tables is one thing, making them look good and such that the reader can easily read the data is another!\nHighly recommend this Tom Mock guide, based on Jon Schwabish’s original. It covers guidelines for making better tables, and shows how to implement them in gt. It demonstrates even more of what gt can do than the article on the previous slide."
  },
  {
    "objectID": "slides/05-graphics/index.html#gtsummary",
    "href": "slides/05-graphics/index.html#gtsummary",
    "title": "Graphics",
    "section": "gtsummary",
    "text": "gtsummary\ngtsummary extends the gt package and is used for summarising tables and working with statistical model summaries."
  },
  {
    "objectID": "slides/05-graphics/index.html#gtsummary-example-1-data",
    "href": "slides/05-graphics/index.html#gtsummary-example-1-data",
    "title": "Graphics",
    "section": "gtsummary example 1: data",
    "text": "gtsummary example 1: data\n\nlibrary(gtsummary)\n# make dataset with a few variables to summarize\ntrial2 &lt;- trial |&gt; select(age, grade, response, trt)\n\nhead(trial2)\n\n# A tibble: 6 × 4\n    age grade response trt   \n  &lt;dbl&gt; &lt;fct&gt;    &lt;int&gt; &lt;chr&gt; \n1    23 II           0 Drug A\n2     9 I            1 Drug B\n3    31 II           0 Drug A\n4    NA III          1 Drug A\n5    51 III          1 Drug A\n6    39 I            0 Drug B"
  },
  {
    "objectID": "slides/05-graphics/index.html#gtsummary-example-1-code",
    "href": "slides/05-graphics/index.html#gtsummary-example-1-code",
    "title": "Graphics",
    "section": "gtsummary example 1: code",
    "text": "gtsummary example 1: code\n\n# summarize and augment the data\nsummary_table &lt;- \n  tbl_summary(\n    trial2,\n    by = trt, # split table by group\n    missing = \"no\" # don't list missing data separately\n  )  |&gt; \n  add_n() |&gt; # add column with total number of non-missing observations\n  add_p() |&gt; # test for a difference between groups\n  modify_header(label = \"**Variable**\") |&gt; # update the column header\n  bold_labels()"
  },
  {
    "objectID": "slides/05-graphics/index.html#gtsummary-example-1-output",
    "href": "slides/05-graphics/index.html#gtsummary-example-1-output",
    "title": "Graphics",
    "section": "gtsummary example 1: output",
    "text": "gtsummary example 1: output\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nN\nDrug A\nN = 981\nDrug B\nN = 1021\np-value2\n\n\n\n\nAge\n189\n46 (37, 60)\n48 (39, 56)\n0.7\n\n\nGrade\n200\n\n\n\n\n0.9\n\n\n    I\n\n\n35 (36%)\n33 (32%)\n\n\n\n\n    II\n\n\n32 (33%)\n36 (35%)\n\n\n\n\n    III\n\n\n31 (32%)\n33 (32%)\n\n\n\n\nTumor Response\n193\n28 (29%)\n33 (34%)\n0.5\n\n\n\n1 Median (Q1, Q3); n (%)\n\n\n2 Wilcoxon rank sum test; Pearson’s Chi-squared test"
  },
  {
    "objectID": "slides/05-graphics/index.html#gtsummary-example-2-code",
    "href": "slides/05-graphics/index.html#gtsummary-example-2-code",
    "title": "Graphics",
    "section": "gtsummary example 2: code",
    "text": "gtsummary example 2: code\n\nmod1 &lt;- glm(response ~ trt + age + grade, trial, family = binomial)\n\nregression_tab &lt;- tbl_regression(mod1, exponentiate = TRUE)"
  },
  {
    "objectID": "slides/05-graphics/index.html#gtsummary-example-2-output",
    "href": "slides/05-graphics/index.html#gtsummary-example-2-output",
    "title": "Graphics",
    "section": "gtsummary example 2: output",
    "text": "gtsummary example 2: output\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nOR\n95% CI\np-value\n\n\n\n\nChemotherapy Treatment\n\n\n\n\n\n\n\n\n    Drug A\n—\n—\n\n\n\n\n    Drug B\n1.13\n0.60, 2.13\n0.7\n\n\nAge\n1.02\n1.00, 1.04\n0.10\n\n\nGrade\n\n\n\n\n\n\n\n\n    I\n—\n—\n\n\n\n\n    II\n0.85\n0.39, 1.85\n0.7\n\n\n    III\n1.01\n0.47, 2.15\n&gt;0.9\n\n\n\nAbbreviations: CI = Confidence Interval, OR = Odds Ratio"
  },
  {
    "objectID": "slides/05-graphics/index.html#table-inspiration",
    "href": "slides/05-graphics/index.html#table-inspiration",
    "title": "Graphics",
    "section": "Table inspiration",
    "text": "Table inspiration\nThe winners of the RStudio/Posit Table Contest\n\n2024\n2022\n2021\n2020, also has links to tutorials\n\nContest does not appear to have been held in 2023."
  },
  {
    "objectID": "slides/05-graphics/index.html#license",
    "href": "slides/05-graphics/index.html#license",
    "title": "Graphics",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "Content",
    "section": "",
    "text": "Date\n\n\n\nTitle\n\n\n\n\n\n\n\n\nOct 16, 2025\n\n\nIntroduction to R and RStudio\n\n\n\n\n\n\nOct 17, 2025\n\n\nData types, stuctures, and wrangling\n\n\n\n\n\n\nOct 30, 2025\n\n\nProgramming in R\n\n\n\n\n\n\nOct 31, 2025\n\n\nSimulation and optimisation\n\n\n\n\n\n\nNov 13, 2025\n\n\nGraphics\n\n\n\n\n\n\nNov 14, 2025\n\n\nQuarto\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Foundations 2025",
    "section": "",
    "text": "Welcome to the R Foundations course for 2025!\nThis course is primarily aimed at first year Statistics PhD students. It has been developed as a prerequisite for those attending the Academy for PhD Training in Statistics (APTS) to cover the R material that’s required for those modules.\nThe course is also suitable for doctoral students and post-docs across other departments, and open to all interested members of the university, space permitting.\nFor students at other universities attending APTS, working through the content should give you a sufficient grounding to prepare for the R component of the APTS modules."
  },
  {
    "objectID": "index.html#syllabus-overview",
    "href": "index.html#syllabus-overview",
    "title": "R Foundations 2025",
    "section": "Syllabus overview",
    "text": "Syllabus overview\nWe cover an introduction to R and RStudio; Data types, structures, and data wrangling using the tidyverse; programming in R; simulation and optimisation; graphics (both base and ggplot2), and Quarto.\nAll slides and further resources can be accessed from the content page and also via the schedule."
  },
  {
    "objectID": "index.html#session-details",
    "href": "index.html#session-details",
    "title": "R Foundations 2025",
    "section": "Session details",
    "text": "Session details\n   Thursday and Friday of weeks 2, 4 and 6 (Oct 16th, 17th, 30th, 31st, Nov 13th, 14th)\n   12:30–14:00\n   A0.28, Milburn House\n   See the full schedule.\nPlease fill in the join form to register to attend."
  },
  {
    "objectID": "index.html#instructor-details",
    "href": "index.html#instructor-details",
    "title": "R Foundations 2025",
    "section": "Instructor details",
    "text": "Instructor details\n   Ella Kaye\n   ella.m.kaye@warwick.ac.uk"
  },
  {
    "objectID": "index.html#prerequistes",
    "href": "index.html#prerequistes",
    "title": "R Foundations 2025",
    "section": "Prerequistes",
    "text": "Prerequistes\nPlease see the prerequisites page for details on getting set up in advance of the first session."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#overview",
    "href": "slides/02-data-wrangling/index.html#overview",
    "title": "Data Types, Structures and Wrangling",
    "section": "Overview",
    "text": "Overview\n\nData types\nData structures\nData import and wrangling"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#assigning-in-r",
    "href": "slides/02-data-wrangling/index.html#assigning-in-r",
    "title": "Data Types, Structures and Wrangling",
    "section": "Assigning in R",
    "text": "Assigning in R\nThe assignment operator in R is &lt;-\nWe can create objects in R and assign them names:\n\nx &lt;- 1 + 3\n\nThen we can inspect the objects we have created:\n\nx\n\n[1] 4\n\n\nAnd use them further:\n\nx + 5\n\n[1] 9"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#naming-objects",
    "href": "slides/02-data-wrangling/index.html#naming-objects",
    "title": "Data Types, Structures and Wrangling",
    "section": "Naming objects",
    "text": "Naming objects\n\nforbiddengoodbad\n\n\nObject names cannot:\n\nstart with a number\ncontain certain characters like , - ?\ncontain a space (unless in ``, but that is not best practice)\n\n\n\n\nmeaningful yet concise\n\n\nday_one\nday_1\n\nconsistent\n\n\ni_use_snake_case\nother.people.use.periods\nevenOthersUseCamelCase\nThe tidyverse has popularised the use of snake_case. Camel case is a better option for screen readers. The use of periods is discouraged because periods have other uses in R.\n\n\n\nnot meaningful\n\n\nfoo\nbar\n\nunnecessarily long or difficult to read\n\n\nfirst_day_of_month\ndayone\n\ninconsistent"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#rstudio-demo",
    "href": "slides/02-data-wrangling/index.html#rstudio-demo",
    "title": "Data Types, Structures and Wrangling",
    "section": "RStudio demo",
    "text": "RStudio demo\nAssigning and environment pane.\nThere is an RStudio shortcut for &lt;- which also puts spaces around it:\nAlt/⌥ + -"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#basic-data-types-in-r",
    "href": "slides/02-data-wrangling/index.html#basic-data-types-in-r",
    "title": "Data Types, Structures and Wrangling",
    "section": "Basic data types in R",
    "text": "Basic data types in R\n\ncharacter: \"a\", \"hello, world!\"\ndouble: 3, 3.14, pi\ninteger: 3L (the L tells R to store this as an interger)\nlogical: TRUE and FALSE\ncomplex: 3+2i. N.B. need to write 1i for \\(\\sqrt(-1)\\).\nraw: holds raw bytes (rarely used)\n\nN.B. double and integer types are both numeric"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#special-values",
    "href": "slides/02-data-wrangling/index.html#special-values",
    "title": "Data Types, Structures and Wrangling",
    "section": "Special values",
    "text": "Special values\n\nNA: The value NA is given to any data which R knows to be missing. It is not a character string, i.e. it is different to \"NA\"\nInf: Positive infinity, e.g. the result of dividing a non-zero number by zero\nNaN: Not a number, e.g. attempting to find the logarithm of a negative number\nNULL: The null object. Often returned by expressions and functions whose value is undefined"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#data-structures",
    "href": "slides/02-data-wrangling/index.html#data-structures",
    "title": "Data Types, Structures and Wrangling",
    "section": "Data structures",
    "text": "Data structures\nData structures are the building blocks of R code.\nIn R, the main types of structures are\n\nvectors\nfactors\nmatrices and arrays\nlists\ndata frames\n\nFocus today on vectors, factors and data frames."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#vectors",
    "href": "slides/02-data-wrangling/index.html#vectors",
    "title": "Data Types, Structures and Wrangling",
    "section": "Vectors",
    "text": "Vectors\nA single number is a special case of a numeric vector. Vectors of length greater than one can be created using the concatenate function, c.\n\nx &lt;- c(1, 3, 6)\nfruits &lt;- c(\"apple\", \"pear\")\n\nThe elements of the vector must be of the same type: common types are numeric, character and logical.\nThere are built-in functions for getting information about vectors, e.g.\n\nlength(fruits)\n\n[1] 2"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#creating-vectors",
    "href": "slides/02-data-wrangling/index.html#creating-vectors",
    "title": "Data Types, Structures and Wrangling",
    "section": "Creating vectors",
    "text": "Creating vectors\nThere are some useful shortcuts for certain types of vector:\n\n1:5\n\n[1] 1 2 3 4 5\n\nseq(from = 3, to = 5, by = 0.5)\n\n[1] 3.0 3.5 4.0 4.5 5.0\n\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\n\nWhat do you think letters returns?"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#subsetting-vectors",
    "href": "slides/02-data-wrangling/index.html#subsetting-vectors",
    "title": "Data Types, Structures and Wrangling",
    "section": "Subsetting vectors",
    "text": "Subsetting vectors\nWe subset vectors using []:\n\nBy position, starting at 1\n\n\nletters[c(1, 5, 9, 15, 21)]\n\n[1] \"a\" \"e\" \"i\" \"o\" \"u\"\n\n\n\nBy logical vector\n\n\nx &lt;- c(5, 3, 6, 1)\nx[c(TRUE, FALSE, TRUE, FALSE)]\n\n[1] 5 6\n\n\n\nx[x &gt; 4]\n\n[1] 5 6"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#your-turn",
    "href": "slides/02-data-wrangling/index.html#your-turn",
    "title": "Data Types, Structures and Wrangling",
    "section": "Your turn!",
    "text": "Your turn!\n\nIn your R-Foundations project from last week, create and save a new script called data-types.R\nLook at the help page for the rep() function: ?rep\nStarting with the vector x &lt;- c(1,3,6), can you make the following patterns:\n\n1, 3, 6, 1, 3, 6\n1, 1, 3, 3, 6, 6\n1, 1, 3, 3, 6, 6, 1, 1, 3, 3, 6, 6\n\nWhat does rep(x, 2, 2) give? Is it what you expected? Can you explain the output?\n\n\nrep(x, 2) or rep(x, times = 2) rep(x, each = 2) rep(x, 2, each = 2) rep(x, 2, 2) is rep(x, times = 2, length.out = 2)"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#factors",
    "href": "slides/02-data-wrangling/index.html#factors",
    "title": "Data Types, Structures and Wrangling",
    "section": "Factors",
    "text": "Factors\nFactors are used to represent categorical data. They can be ordered or unordered.\nFactors are stored as integers, and have labels associated with these unique integers. While factors usually look (and often behave) like character vectors, they are actually integers under the hood, and you need to be careful when treating them like strings."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#factors-1",
    "href": "slides/02-data-wrangling/index.html#factors-1",
    "title": "Data Types, Structures and Wrangling",
    "section": "Factors",
    "text": "Factors\nOnce created, factors can only contain a pre-defined set values, known as levels. By default, R always sorts levels in alphabetical order. For instance, if you have a factor with 2 levels:\n\nfruits &lt;- factor(c(\"apple\", \"apple\", \"pear\"))\nfruits\n\n[1] apple apple pear \nLevels: apple pear\n\nstr(fruits)\n\n Factor w/ 2 levels \"apple\",\"pear\": 1 1 2\n\n\nThe forcats package from the tidyverse has many functions for dealing with factors."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#data-frames",
    "href": "slides/02-data-wrangling/index.html#data-frames",
    "title": "Data Types, Structures and Wrangling",
    "section": "Data frames",
    "text": "Data frames\nData sets are stored in R as data frames\nThese are structured as a list of objects, typically vectors, of the same length.\n\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nstr(penguins)\n\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ..."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#tibbles",
    "href": "slides/02-data-wrangling/index.html#tibbles",
    "title": "Data Types, Structures and Wrangling",
    "section": "tibbles",
    "text": "tibbles\nFrom the tibble page:\n\nA tibble, or tbl_df, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less (i.e. they don’t change variable names or types, and don’t do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced print() method which makes them easier to use with large datasets containing complex objects."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#creating-data-frames",
    "href": "slides/02-data-wrangling/index.html#creating-data-frames",
    "title": "Data Types, Structures and Wrangling",
    "section": "Creating data frames",
    "text": "Creating data frames\n\n`my numbers` &lt;- 1:9\nfruits &lt;- rep(c(\"apple\", \"pear\", \"orange\"), 3)\n\n\n\n\ndata.frame(`my numbers`, \n           fruits)\n\n  my.numbers fruits\n1          1  apple\n2          2   pear\n3          3 orange\n4          4  apple\n5          5   pear\n6          6 orange\n7          7  apple\n8          8   pear\n9          9 orange\n\n\n\n\ntibble(`my numbers`, \n       fruits)\n\n# A tibble: 9 × 2\n  `my numbers` fruits\n         &lt;int&gt; &lt;chr&gt; \n1            1 apple \n2            2 pear  \n3            3 orange\n4            4 apple \n5            5 pear  \n6            6 orange\n7            7 apple \n8            8 pear  \n9            9 orange\n\n\n\nSpot the differences!"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#import-dataset-button",
    "href": "slides/02-data-wrangling/index.html#import-dataset-button",
    "title": "Data Types, Structures and Wrangling",
    "section": "Import dataset (button)",
    "text": "Import dataset (button)\nUsing the Import Dataset dialog in RStudio\n\nwe can import files stored locally or online in the following formats:\n\n.txt/.csv via read_delim/read_csv from readr.\n.xlsx via read_excel from readxl.\n.sav/.por , .sas7bdat and .dta via read_spss, read_sas and read_stata respectively from haven.\n\nMost of these functions also allow files to be compressed, e.g. as .zip."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#file-names-and-paths-and-project-structure",
    "href": "slides/02-data-wrangling/index.html#file-names-and-paths-and-project-structure",
    "title": "Data Types, Structures and Wrangling",
    "section": "File names and paths and project structure",
    "text": "File names and paths and project structure\nIt’s REALLY important to have good file names and paths, and a good project structure.\nI leave you in the extremely capable hand of Danielle Navarro to take you thoroughly through best practices:\nhttps://djnavarro.net/slides-project-structure/#1\nI also HIGHLY recommend you check out the here package, which enables easy file referencing in project-oriented workflows."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#import-data-code",
    "href": "slides/02-data-wrangling/index.html#import-data-code",
    "title": "Data Types, Structures and Wrangling",
    "section": "Import data (code)",
    "text": "Import data (code)\nThe rio package provides a common interface to the functions used by Import Dataset as well as many others.\nThe data format is automatically recognised from the file extension. To read the data in as a tibble, we use the setclass argument.\n\nlibrary(rio)\npenguins_lter &lt;- import(\"data/penguins_lter.csv\")\npenguins_lter_tbl &lt;- import(\"data/penguins_lter.csv\", setclass = \"tibble\")\n\nSee ?rio for the underlying functions used for each format and the corresponding optional arguments, e.g. the skip argument to read_excel to skip a certain number of rows."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#import-data-demo",
    "href": "slides/02-data-wrangling/index.html#import-data-demo",
    "title": "Data Types, Structures and Wrangling",
    "section": "Import data demo",
    "text": "Import data demo\nShow both button (in Environment and from the file itself) and code\n\nFrom file\n\ndata/penguins_lter.csv\n\nFrom URL\n\nhttps://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-09/wheels.csv\n\nYour turn!"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#dplyr",
    "href": "slides/02-data-wrangling/index.html#dplyr",
    "title": "Data Types, Structures and Wrangling",
    "section": "dplyr",
    "text": "dplyr\nThe dplyr package (part of the tidyverse) provides the following key functions to operate on data frames:\n\nfilter()\narrange()\nselect()\nmutate()\nsummarise()\n\nThey all take a data frame as their first argument. The subsequent arguments describe what to do with the data frame. The result is a new data frame."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#load-packages",
    "href": "slides/02-data-wrangling/index.html#load-packages",
    "title": "Data Types, Structures and Wrangling",
    "section": "Load packages",
    "text": "Load packages\n\nlibrary(dplyr)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#filter-pick-rows-based-on-values-of-observations.",
    "href": "slides/02-data-wrangling/index.html#filter-pick-rows-based-on-values-of-observations.",
    "title": "Data Types, Structures and Wrangling",
    "section": "filter(): pick rows based on values of observations.",
    "text": "filter(): pick rows based on values of observations.\n\nExampleNotes\n\n\n\n\nfilter(penguins, \n       species == \"Gentoo\", \n       bill_length_mm &gt; 48 & bill_depth_mm &gt; 15, \n       !is.na(sex))\n\n# A tibble: 39 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           50            16.3               230        5700\n 2 Gentoo  Biscoe           50            15.2               218        5700\n 3 Gentoo  Biscoe           49            16.1               216        5550\n 4 Gentoo  Biscoe           49.3          15.7               217        5850\n 5 Gentoo  Biscoe           49.2          15.2               221        6300\n 6 Gentoo  Biscoe           48.7          15.1               222        5350\n 7 Gentoo  Biscoe           50            15.3               220        5550\n 8 Gentoo  Biscoe           59.6          17                 230        6050\n 9 Gentoo  Biscoe           48.4          16.3               220        5400\n10 Gentoo  Biscoe           48.7          15.7               208        5350\n# ℹ 29 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\nvariable names are unquoted\nbuilding blocks of conditions:\n\n\n\n\nBuilding block\nR code\n\n\n\n\nBinary comparisons\n&gt;, &lt;, ==, &lt;=, &gt;=, !=\n\n\nLogical operators\nor |, and &, not !\n\n\nValue matching\ne.g. x %in% 6:9\n\n\nMissing indicator\ne.g. is.na(x)"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#select-select-variables-columns-in-a-dataset",
    "href": "slides/02-data-wrangling/index.html#select-select-variables-columns-in-a-dataset",
    "title": "Data Types, Structures and Wrangling",
    "section": "select(): select variables (columns) in a dataset",
    "text": "select(): select variables (columns) in a dataset\n\nExample 1Example 2Example 3Example 4Note\n\n\n\nselect(penguins, bill_length_mm, bill_depth_mm)\n\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            &lt;dbl&gt;         &lt;dbl&gt;\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows\n\n\n\n\n\nselect(penguins, bill_length_mm:body_mass_g)\n\n# A tibble: 344 × 4\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1           39.1          18.7               181        3750\n 2           39.5          17.4               186        3800\n 3           40.3          18                 195        3250\n 4           NA            NA                  NA          NA\n 5           36.7          19.3               193        3450\n 6           39.3          20.6               190        3650\n 7           38.9          17.8               181        3625\n 8           39.2          19.6               195        4675\n 9           34.1          18.1               193        3475\n10           42            20.2               190        4250\n# ℹ 334 more rows\n\n\n\n\n\nselect(penguins, starts_with(\"bill\"))\n\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            &lt;dbl&gt;         &lt;dbl&gt;\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows\n\n\n\n\n\nselect(penguins, where(is.numeric))\n\n# A tibble: 344 × 5\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;int&gt;\n 1           39.1          18.7               181        3750  2007\n 2           39.5          17.4               186        3800  2007\n 3           40.3          18                 195        3250  2007\n 4           NA            NA                  NA          NA  2007\n 5           36.7          19.3               193        3450  2007\n 6           39.3          20.6               190        3650  2007\n 7           38.9          17.8               181        3625  2007\n 8           39.2          19.6               195        4675  2007\n 9           34.1          18.1               193        3475  2007\n10           42            20.2               190        4250  2007\n# ℹ 334 more rows\n\n\n\n\nThere are several other selectors. See ?dplyr::select or online for further details."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#a-note-about-pipes-vs",
    "href": "slides/02-data-wrangling/index.html#a-note-about-pipes-vs",
    "title": "Data Types, Structures and Wrangling",
    "section": "A note about pipes: |> vs %>%",
    "text": "A note about pipes: |&gt; vs %&gt;%\nPipes pass what comes before into an argument (by default the first) of what comes after.\nPipes are a powerful tool for clearly expressing a sequence of multiple operations.\n\n\n|&gt;\n\nThe ‘native’ pipe, built into base R since v4.1 (May 2021)\nImproved in v4.2 (April 2022)\n\n\n%&gt;%\n\nHas been around in the magrittr package since 2014\nUsed throughout the tidyverse (though that is changing)"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#pipes-similarity",
    "href": "slides/02-data-wrangling/index.html#pipes-similarity",
    "title": "Data Types, Structures and Wrangling",
    "section": "Pipes: similarity",
    "text": "Pipes: similarity\nBy default, a pipe takes what comes before and pass it to first argument of what comes after.\n\nExample 1Example 2\n\n\n\nlog(2, base = 10)\n\n[1] 0.30103\n\n2 %&gt;% log(base = 10)\n\n[1] 0.30103\n\n2 |&gt; log(base = 10)\n\n[1] 0.30103\n\n\n\n\n\npaste(\"a\", \"b\", \"c\")\n\n[1] \"a b c\"\n\n\"a\" %&gt;% paste(\"b\", \"c\")\n\n[1] \"a b c\"\n\n\"a\" |&gt; paste(\"b\", \"c\")\n\n[1] \"a b c\""
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#pipes-key-difference",
    "href": "slides/02-data-wrangling/index.html#pipes-key-difference",
    "title": "Data Types, Structures and Wrangling",
    "section": "Pipes: key difference",
    "text": "Pipes: key difference\nSo far, so good, but what if we want to pipe into a subsequent argument?\n\nExample 1Example 2\n\n\n\nlog(2, 10) ## don't need to name the argument\n\n[1] 0.30103\n\n10 %&gt;% log(2, .)\n\n[1] 0.30103\n\n10 |&gt; log(2, base = _)\n\n[1] 0.30103\n\n\n\n\n\npaste(\"a\", \"b\", \"c\")\n\n[1] \"a b c\"\n\n\"b\" %&gt;% paste(\"a\", ., \"c\")\n\n[1] \"a b c\"\n\n\"b\" |&gt; paste(\"a\", ..2 = _, \"c\")\n\n[1] \"a b c\"\n\n\n\n\n\nDifferent placeholder (. vs _) and with native pipe need a named argument"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#pipe-keyboard-shortcut",
    "href": "slides/02-data-wrangling/index.html#pipe-keyboard-shortcut",
    "title": "Data Types, Structures and Wrangling",
    "section": "Pipe keyboard shortcut",
    "text": "Pipe keyboard shortcut\nThere is an RStudio shortcut for the pipe which also puts spaces around it:\nCtrl/⌘ + ⇧ + M.\nThis can be set to either %&gt;% or |&gt; in the RStudio preferences.\nGo to Tools -&gt; Global Options -&gt; Code and check/uncheck box for “Use native pipe operator”."
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#arrange-change-the-ordering-of-rows",
    "href": "slides/02-data-wrangling/index.html#arrange-change-the-ordering-of-rows",
    "title": "Data Types, Structures and Wrangling",
    "section": "arrange(): change the ordering of rows",
    "text": "arrange(): change the ordering of rows\n\nExample 1Example 2Example 3\n\n\n\npenguins |&gt;\n  select(species, sex, flipper_length_mm) |&gt;\n  arrange(flipper_length_mm)\n\n# A tibble: 344 × 3\n   species   sex    flipper_length_mm\n   &lt;fct&gt;     &lt;fct&gt;              &lt;int&gt;\n 1 Adelie    female               172\n 2 Adelie    female               174\n 3 Adelie    female               176\n 4 Adelie    female               178\n 5 Adelie    male                 178\n 6 Adelie    female               178\n 7 Chinstrap female               178\n 8 Adelie    &lt;NA&gt;                 179\n 9 Adelie    &lt;NA&gt;                 180\n10 Adelie    male                 180\n# ℹ 334 more rows\n\n\n\n\n\npenguins |&gt;\n  select(species, sex, flipper_length_mm) |&gt;\n  arrange(species, flipper_length_mm)\n\n# A tibble: 344 × 3\n   species sex    flipper_length_mm\n   &lt;fct&gt;   &lt;fct&gt;              &lt;int&gt;\n 1 Adelie  female               172\n 2 Adelie  female               174\n 3 Adelie  female               176\n 4 Adelie  female               178\n 5 Adelie  male                 178\n 6 Adelie  female               178\n 7 Adelie  &lt;NA&gt;                 179\n 8 Adelie  &lt;NA&gt;                 180\n 9 Adelie  male                 180\n10 Adelie  male                 180\n# ℹ 334 more rows\n\n\n\n\n\npenguins |&gt;\n  select(species, sex, flipper_length_mm) |&gt;\n  arrange(desc(flipper_length_mm))\n\n# A tibble: 344 × 3\n   species sex   flipper_length_mm\n   &lt;fct&gt;   &lt;fct&gt;             &lt;int&gt;\n 1 Gentoo  male                231\n 2 Gentoo  male                230\n 3 Gentoo  male                230\n 4 Gentoo  male                230\n 5 Gentoo  male                230\n 6 Gentoo  male                230\n 7 Gentoo  male                230\n 8 Gentoo  male                230\n 9 Gentoo  male                229\n10 Gentoo  male                229\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#mutate-create-and-modify-columns",
    "href": "slides/02-data-wrangling/index.html#mutate-create-and-modify-columns",
    "title": "Data Types, Structures and Wrangling",
    "section": "mutate(): create and modify columns",
    "text": "mutate(): create and modify columns\n\nExample 1Example 2Example 3\n\n\n\npenguins |&gt;\n  select(bill_length_mm) |&gt;\n  mutate(bill_length_mm_sq = bill_length_mm^2)\n\n# A tibble: 344 × 2\n   bill_length_mm bill_length_mm_sq\n            &lt;dbl&gt;             &lt;dbl&gt;\n 1           39.1             1529.\n 2           39.5             1560.\n 3           40.3             1624.\n 4           NA                 NA \n 5           36.7             1347.\n 6           39.3             1544.\n 7           38.9             1513.\n 8           39.2             1537.\n 9           34.1             1163.\n10           42               1764 \n# ℹ 334 more rows\n\n\n\n\n\npenguins |&gt;\n  filter(species == \"Gentoo\") |&gt;\n  select(sex, flipper_length_mm) |&gt;\n  mutate(size = if_else(flipper_length_mm &gt; 217, \"big\", \"small\"))\n\n# A tibble: 124 × 3\n   sex    flipper_length_mm size \n   &lt;fct&gt;              &lt;int&gt; &lt;chr&gt;\n 1 female               211 small\n 2 male                 230 big  \n 3 female               210 small\n 4 male                 218 big  \n 5 male                 215 small\n 6 female               210 small\n 7 female               211 small\n 8 male                 219 big  \n 9 female               209 small\n10 male                 215 small\n# ℹ 114 more rows\n\n\n\n\n\npenguins |&gt;\n  select(bill_length_mm) |&gt;\n  filter(!is.na(bill_length_mm)) |&gt;\n  mutate(bill_length_mm_cumsum = cumsum(bill_length_mm))\n\n# A tibble: 342 × 2\n   bill_length_mm bill_length_mm_cumsum\n            &lt;dbl&gt;                 &lt;dbl&gt;\n 1           39.1                  39.1\n 2           39.5                  78.6\n 3           40.3                 119. \n 4           36.7                 156. \n 5           39.3                 195. \n 6           38.9                 234. \n 7           39.2                 273  \n 8           34.1                 307. \n 9           42                   349. \n10           37.8                 387. \n# ℹ 332 more rows"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#summarise-reduces-multiple-values-down-to-a-single-summary",
    "href": "slides/02-data-wrangling/index.html#summarise-reduces-multiple-values-down-to-a-single-summary",
    "title": "Data Types, Structures and Wrangling",
    "section": "summarise(): reduces multiple values down to a single summary",
    "text": "summarise(): reduces multiple values down to a single summary\n\nExample 1Example 2Example 3Example 4: count\n\n\n\npenguins |&gt;\n  summarise(mean(body_mass_g, na.rm = TRUE))  \n\n# A tibble: 1 × 1\n  `mean(body_mass_g, na.rm = TRUE)`\n                              &lt;dbl&gt;\n1                             4202.\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  filter(!is.na(sex)) |&gt;\n  summarise(mean = mean(body_mass_g, na.rm = TRUE)) |&gt;  # give column a name\n  ungroup() # best practice after group_by()\n\n# A tibble: 6 × 3\n  species   sex     mean\n  &lt;fct&gt;     &lt;fct&gt;  &lt;dbl&gt;\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Chinstrap female 3527.\n4 Chinstrap male   3939.\n5 Gentoo    female 4680.\n6 Gentoo    male   5485.\n\n\n\n\n\npenguins |&gt;\n  filter(!is.na(sex)) |&gt;\n  summarise(mean = mean(body_mass_g, na.rm = TRUE),\n            .by = c(species, sex)) # new in dplyr 1.1.0, note the `.`\n\n# A tibble: 6 × 3\n  species   sex     mean\n  &lt;fct&gt;     &lt;fct&gt;  &lt;dbl&gt;\n1 Adelie    male   4043.\n2 Adelie    female 3369.\n3 Gentoo    female 4680.\n4 Gentoo    male   5485.\n5 Chinstrap female 3527.\n6 Chinstrap male   3939.\n\n\n\n\n\npenguins |&gt;\n  count(species, island)\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n\n\nShortcut for\n\npenguins |&gt;\n  summarise(n = n(), .by = c(species, island))\n\n\n\n\n\ncount() and summarise(n = n()) give different orderings"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#your-turn-1",
    "href": "slides/02-data-wrangling/index.html#your-turn-1",
    "title": "Data Types, Structures and Wrangling",
    "section": "Your turn!",
    "text": "Your turn!\n\nExplore the wheels data!\nShare your code on https://developer.r-project.org/etherpad/p/r-foundations-2024"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#tidydatatutor.com",
    "href": "slides/02-data-wrangling/index.html#tidydatatutor.com",
    "title": "Data Types, Structures and Wrangling",
    "section": "tidydatatutor.com",
    "text": "tidydatatutor.com\nTidy Data Tutor lets you write R and Tidyverse code in your browser and see how your data frame changes at each step of a data analysis pipeline.\nDEMO"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#additional-resources",
    "href": "slides/02-data-wrangling/index.html#additional-resources",
    "title": "Data Types, Structures and Wrangling",
    "section": "Additional resources",
    "text": "Additional resources\n\nRStudio cheatsheets\nR for data science book\nferriswheels"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#sources",
    "href": "slides/02-data-wrangling/index.html#sources",
    "title": "Data Types, Structures and Wrangling",
    "section": "Sources",
    "text": "Sources\nMaterial inspired by and remixed from:\n\nhttps://stat545.com/r-basics.html\nhttps://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/\nhttps://slides.silviacanelon.com/tour-of-the-tidyverse-v2/\nhttps://www.heatherturner.net/teaching/zero-to-hero/\nhttp://adv-r.had.co.nz/Style.html"
  },
  {
    "objectID": "slides/02-data-wrangling/index.html#license",
    "href": "slides/02-data-wrangling/index.html#license",
    "title": "Data Types, Structures and Wrangling",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/06-quarto/index.html#disclaimer",
    "href": "slides/06-quarto/index.html#disclaimer",
    "title": "Quarto",
    "section": "Disclaimer",
    "text": "Disclaimer\nThese slides are almost entirely copied from Tom Mock’s ‘Getting Started with Quarto’ workshop at rstudio::conf(2022).\n\nWorkshop website\nWorkshop repo\n\nShared under Creative Commons 4.0 License."
  },
  {
    "objectID": "slides/06-quarto/index.html#hello-quarto",
    "href": "slides/06-quarto/index.html#hello-quarto",
    "title": "Quarto",
    "section": "Hello Quarto",
    "text": "Hello Quarto\n\nQuarto® is an open-source scientific and technical publishing system built on Pandoc\n\n\n\nYou can weave together narrative text and code to produce elegantly formatted output as documents, web pages, blog posts, books and more."
  },
  {
    "objectID": "slides/06-quarto/index.html#what-about-rmarkdown",
    "href": "slides/06-quarto/index.html#what-about-rmarkdown",
    "title": "Quarto",
    "section": "What about RMarkdown?",
    "text": "What about RMarkdown?"
  },
  {
    "objectID": "slides/06-quarto/index.html#so-what-is-quarto",
    "href": "slides/06-quarto/index.html#so-what-is-quarto",
    "title": "Quarto",
    "section": "So what is Quarto?",
    "text": "So what is Quarto?\n\nQuarto is the next generation of R Markdown. For everyone.\n\n\nQuarto is a command line interface (CLI) that renders plain text formats (.qmd, .rmd, .md) OR mixed formats (.ipynb/Jupyter notebook) into static PDF/Word/HTML reports, books, websites, presentations and more"
  },
  {
    "objectID": "slides/06-quarto/index.html#quarto-more-than-just-knitr",
    "href": "slides/06-quarto/index.html#quarto-more-than-just-knitr",
    "title": "Quarto",
    "section": "Quarto, more than just knitr",
    "text": "Quarto, more than just knitr\nWe learned from 10 years of literate programming with knitr + rmarkdown"
  },
  {
    "objectID": "slides/06-quarto/index.html#for-everyone",
    "href": "slides/06-quarto/index.html#for-everyone",
    "title": "Quarto",
    "section": "For everyone",
    "text": "For everyone\n\nWorks with R, Python, Julia, Observable JS\nknitr and jupyter engines\nWorks in RStudio, Jupyter Notebooks, VS Code\n\n\nFor the R Foundations course, we’ll focus on R and RStudio"
  },
  {
    "objectID": "slides/06-quarto/index.html#so-what-is-quarto-1",
    "href": "slides/06-quarto/index.html#so-what-is-quarto-1",
    "title": "Quarto",
    "section": "So what is Quarto?",
    "text": "So what is Quarto?\n\nA Quarto document i.e. a .qmd is a plain text file, like a .rmd, that can be rendered to many different formats"
  },
  {
    "objectID": "slides/06-quarto/index.html#one-install-batteries-included",
    "href": "slides/06-quarto/index.html#one-install-batteries-included",
    "title": "Quarto",
    "section": "One install, “Batteries included”",
    "text": "One install, “Batteries included”\n\nRMarkdown grew into a large ecosystem, with varying syntax.\n\n\nQuarto comes “batteries included” straight out of the box\n\nHTML reports and websites\nPDF reports\nMS Office (Word, Powerpoint)\nPresentations (Powerpoint, Beamer, revealjs)\nBooks\n\n\n\n\nAny language, exact same approach and syntax"
  },
  {
    "objectID": "slides/06-quarto/index.html#quarto-for-rmarkdown-users",
    "href": "slides/06-quarto/index.html#quarto-for-rmarkdown-users",
    "title": "Quarto",
    "section": "Quarto for RMarkdown users",
    "text": "Quarto for RMarkdown users\nSee FAQs, including a conversion from RMarkdown formats to Quarto equivalents."
  },
  {
    "objectID": "slides/06-quarto/index.html#anatomy-of-a-quarto-document",
    "href": "slides/06-quarto/index.html#anatomy-of-a-quarto-document",
    "title": "Quarto",
    "section": "Anatomy of a Quarto document",
    "text": "Anatomy of a Quarto document\n\nMetadata (YAML)\n\n---\nformat: html\n---"
  },
  {
    "objectID": "slides/06-quarto/index.html#anatomy-of-a-quarto-document-1",
    "href": "slides/06-quarto/index.html#anatomy-of-a-quarto-document-1",
    "title": "Quarto",
    "section": "Anatomy of a Quarto document",
    "text": "Anatomy of a Quarto document\n\nCode\n\n\n```{r}\n#| eval: true\nlibrary(dplyr)\nmtcars %&gt;% \n  group_by(cyl) %&gt;%\n  summarize(mean = mean(mpg), .groups = \"drop\")\n```\n\n# A tibble: 3 × 2\n    cyl  mean\n  &lt;dbl&gt; &lt;dbl&gt;\n1     4  26.7\n2     6  19.7\n3     8  15.1"
  },
  {
    "objectID": "slides/06-quarto/index.html#anatomy-of-a-quarto-document-2",
    "href": "slides/06-quarto/index.html#anatomy-of-a-quarto-document-2",
    "title": "Quarto",
    "section": "Anatomy of a Quarto document",
    "text": "Anatomy of a Quarto document\n\nText\n\n# Heading 1\nThis is a sentence with some **bold text** and some *italic text* \nThis is an [image](image.png)."
  },
  {
    "objectID": "slides/06-quarto/index.html#metadata-yaml",
    "href": "slides/06-quarto/index.html#metadata-yaml",
    "title": "Quarto",
    "section": "Metadata: YAML",
    "text": "Metadata: YAML\nThe YAML metadata or header is:\n\nprocessed in many stages of the rendering process and can influence the final document in many different ways. It is placed at the very beginning of the document and is read by each of Pandoc, Quarto and knitr. Along the way, the information that it contains can affect the code, content, and the rendering process."
  },
  {
    "objectID": "slides/06-quarto/index.html#yaml",
    "href": "slides/06-quarto/index.html#yaml",
    "title": "Quarto",
    "section": "YAML",
    "text": "YAML\n---\ntitle: \"My Document\"\nformat: \n  html:\n    toc: true\n    code-fold: true\n---"
  },
  {
    "objectID": "slides/06-quarto/index.html#markdown",
    "href": "slides/06-quarto/index.html#markdown",
    "title": "Quarto",
    "section": "Markdown",
    "text": "Markdown\n\nQuarto is based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.\n\n\n\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read"
  },
  {
    "objectID": "slides/06-quarto/index.html#text-formatting",
    "href": "slides/06-quarto/index.html#text-formatting",
    "title": "Quarto",
    "section": "Text Formatting",
    "text": "Text Formatting\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n*italics* and **bold**\nitalics and bold\n\n\nsuperscript^2^ / subscript~2~\nsuperscript2 / subscript2\n\n\n~~strikethrough~~\nstrikethrough\n\n\n`verbatim code`\nverbatim code"
  },
  {
    "objectID": "slides/06-quarto/index.html#headings",
    "href": "slides/06-quarto/index.html#headings",
    "title": "Quarto",
    "section": "Headings",
    "text": "Headings\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n### Header 3\nHeader 3\n\n\n#### Header 4\nHeader 4\n\n\n##### Header 5\nHeader 5\n\n\n###### Header 6\nHeader 6"
  },
  {
    "objectID": "slides/06-quarto/index.html#links",
    "href": "slides/06-quarto/index.html#links",
    "title": "Quarto",
    "section": "Links",
    "text": "Links\n\nThere are several types of “links” or hyperlinks.\n\n\nMarkdownOutput\n\n\nYou can embed [named hyperlinks](https://quarto.org/),\ndirect urls like &lt;https://quarto.org/&gt;, and links to \n[other places](#quarto-anatomy) in \nthe document. The syntax is similar for embedding an\ninline image: ![Penguins](images/lter_penguins.png).\n\n\nYou can embed named hyperlinks, direct urls like https://quarto.org/, and links to other places in the document. The syntax is similar for embedding an inline image:"
  },
  {
    "objectID": "slides/06-quarto/index.html#code",
    "href": "slides/06-quarto/index.html#code",
    "title": "Quarto",
    "section": "Code",
    "text": "Code\n\n\n```{r}\n#| output-location: column\n#| label: fig-airquality\n#| fig-cap: Temperature and ozone level.\n#| warning: false\n\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n```\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "slides/06-quarto/index.html#literate-programming",
    "href": "slides/06-quarto/index.html#literate-programming",
    "title": "Quarto",
    "section": "Literate programming",
    "text": "Literate programming\nLiterate programming is writing out the program logic in a human language with included (separated by a primitive markup) code snippets and macros. - Wikipedia\n---\ntitle: \"ggplot2 demo\"\ndate: \"5/22/2021\"\nformat: html\n---\n\n## Air Quality\n\nThere is a relationship between temperature and the ozone level.\n\n```{r}\n#| label: fig-airquality\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n```"
  },
  {
    "objectID": "slides/06-quarto/index.html#metadata-yaml-1",
    "href": "slides/06-quarto/index.html#metadata-yaml-1",
    "title": "Quarto",
    "section": "Metadata: YAML",
    "text": "Metadata: YAML\n“Yet Another Markup Language” or “YAML Ain’t Markup Language”\n---\nkey: value\n---"
  },
  {
    "objectID": "slides/06-quarto/index.html#output-options",
    "href": "slides/06-quarto/index.html#output-options",
    "title": "Quarto",
    "section": "Output Options",
    "text": "Output Options\n---\nformat: something\n---\n\n---\nformat: html\n---\n---\nformat: pdf\n---\n---\nformat: revealjs\n---"
  },
  {
    "objectID": "slides/06-quarto/index.html#options-on-options",
    "href": "slides/06-quarto/index.html#options-on-options",
    "title": "Quarto",
    "section": "Options on options",
    "text": "Options on options\nThen add option arguments!\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n\nSub-options should be below the main format output and spacing matters!\n---\nformat: \n  html:\n    option1: text\n    option2: logical\n---"
  },
  {
    "objectID": "slides/06-quarto/index.html#yaml-for-format-html",
    "href": "slides/06-quarto/index.html#yaml-for-format-html",
    "title": "Quarto",
    "section": "YAML for format: html",
    "text": "YAML for format: html"
  },
  {
    "objectID": "slides/06-quarto/index.html#yaml-is-sensitive",
    "href": "slides/06-quarto/index.html#yaml-is-sensitive",
    "title": "Quarto",
    "section": "YAML is sensitive",
    "text": "YAML is sensitive\n---\nformat:html # invalid, no space between\n---\n\n---\nformat: # invalid, read as missing\nhtml\n---\n\n---\nformat: \n  html: # valid but needs next object\n---"
  },
  {
    "objectID": "slides/06-quarto/index.html#anatomy-of-a-code-chunk",
    "href": "slides/06-quarto/index.html#anatomy-of-a-code-chunk",
    "title": "Quarto",
    "section": "Anatomy of a code chunk",
    "text": "Anatomy of a code chunk\n```{r}\n#| label: car-stuff\n#| echo: false\nmtcars %&gt;% \n  distinct(cyl)\n```\n\n\nHas 3x backticks on each end ```\n\nIndicate engine (r) between curly braces {r}\n\nPlace options underneath, behind the #| (hashpipe):\n\n#| option1: value"
  },
  {
    "objectID": "slides/06-quarto/index.html#quarto-presentations",
    "href": "slides/06-quarto/index.html#quarto-presentations",
    "title": "Quarto",
    "section": "Quarto presentations",
    "text": "Quarto presentations\n---\nformat: revealjs\n---\n---\nformat: \n  revealjs:\n    slide-number: true\n---"
  },
  {
    "objectID": "slides/06-quarto/index.html#this-quarto-presentation",
    "href": "slides/06-quarto/index.html#this-quarto-presentation",
    "title": "Quarto",
    "section": "This Quarto presentation",
    "text": "This Quarto presentation\n---\ntitle: Quarto\nsubtitle: R Foundations 2024\nauthor: Ella Kaye, Department of Statistics\ndate: 2024-11-21\ndate-format: long\nformat: \n  warwickpres-revealjs:\n    execute:\n      echo: true\n      code-overflow: wrap\n    title-slide-attributes: \n      data-background-image: ../../images/warwick-logo-white.png\n      data-background-size: 15%\n      data-background-position: 100% 0%\n---"
  },
  {
    "objectID": "slides/06-quarto/index.html#more-on-quarto-presentations",
    "href": "slides/06-quarto/index.html#more-on-quarto-presentations",
    "title": "Quarto",
    "section": "More on Quarto presentations",
    "text": "More on Quarto presentations\n\nOfficial guide\nSlidecraft 101 by Emil Hvitfeldt\n\nColours and Fonts\nCode and Output\nTheme variants\nAdvanced slide themes\n7 tips and tricks"
  },
  {
    "objectID": "slides/06-quarto/index.html#web-publishing-venues",
    "href": "slides/06-quarto/index.html#web-publishing-venues",
    "title": "Quarto",
    "section": "Web publishing venues",
    "text": "Web publishing venues\n\n\n\nDestination\nDescription\n\n\n\n\nQuarto Pub\nPublishing service for Quarto documents, websites, and books.\n\n\nGitHub Pages\nPublish content based on source code managed within a GitHub repository.\n\n\nPosit Connect\nPublishing platform for secure sharing of data products within an organization.\n\n\nNetlify\nProfessional web publishing platform.\n\n\nConfluence\nPublishing platform for supporting team collaboration.\n\n\n\n… and more."
  },
  {
    "objectID": "slides/06-quarto/index.html#quarto-pub",
    "href": "slides/06-quarto/index.html#quarto-pub",
    "title": "Quarto",
    "section": "Quarto Pub",
    "text": "Quarto Pub\nVisit https://quartopub.com/ and set up a free account."
  },
  {
    "objectID": "slides/06-quarto/index.html#quarto-publish",
    "href": "slides/06-quarto/index.html#quarto-publish",
    "title": "Quarto",
    "section": "quarto publish",
    "text": "quarto publish\n\n\n\nAt the Terminal, run:\n\n\n\nquarto publish &lt;document&gt;"
  },
  {
    "objectID": "slides/06-quarto/index.html#resources",
    "href": "slides/06-quarto/index.html#resources",
    "title": "Quarto",
    "section": "Resources",
    "text": "Resources\n\nhttps://quarto.org: The official documentation\nAwesome Quarto: A curated list of Quarto talks, tools, examples & articles\nBeautiful Reports and Persentations with Quarto\nGetting Started with Quarto workshop website\nQuarto for R and RStudio workshop"
  },
  {
    "objectID": "slides/06-quarto/index.html#resources-1",
    "href": "slides/06-quarto/index.html#resources-1",
    "title": "Quarto",
    "section": "Resources",
    "text": "Resources\nThese slides are almost entirely copied from Tom Mock’s ‘Getting Started with Quarto’ workshop at rstudio::conf(2022).\n\nWorkshop website\nWorkshop repo\n\nShared under Creative Commons 4.0 License."
  },
  {
    "objectID": "slides/06-quarto/index.html#license",
    "href": "slides/06-quarto/index.html#license",
    "title": "Quarto",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#overview",
    "href": "slides/04-sim-optim/index.html#overview",
    "title": "Simulation and Optimisation",
    "section": "Overview",
    "text": "Overview\n\nNumerical precision\nRandom numbers\nSimulation\nOptimisation\n\nThis material is largely reproduced from Ruth Ripley’s 2013 APTS course"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#how-r-stores-numbers",
    "href": "slides/04-sim-optim/index.html#how-r-stores-numbers",
    "title": "Simulation and Optimisation",
    "section": "How R stores numbers",
    "text": "How R stores numbers\nSome basic understanding is needed of how R stores and does arithmetic on numbers to avoid being surprised by the results it gives.\nFrom the R FAQ:\n\nThe only numbers that can be represented exactly in R’s numeric type are integers and fractions whose denominator is a power of 2. Other numbers have to be rounded to (typically) 53 binary digits accuracy. As a result, two floating point numbers will not reliably be equal unless they have been computed by the same algorithm, and not always even then."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#example",
    "href": "slides/04-sim-optim/index.html#example",
    "title": "Simulation and Optimisation",
    "section": "Example",
    "text": "Example\n\na &lt;- sqrt(2)\na * a == 2\n\n[1] FALSE\n\na * a - 2\n\n[1] 4.440892e-16\n\nall.equal(a * a, 2)\n\n[1] TRUE\n\n\nThe function all.equal() compares two objects using a numeric tolerance of .Machine$double.eps^0.5.1 If you want much greater accuracy than this you will need to consider error propagation carefully.\n.Machine$double.eps is the smallest positive floating-point number x such that 1 + x != 1 on the machine R is running on."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#numerical-consideration-resources",
    "href": "slides/04-sim-optim/index.html#numerical-consideration-resources",
    "title": "Simulation and Optimisation",
    "section": "Numerical consideration resources",
    "text": "Numerical consideration resources\nFor more information, see e.g. \n\nDavid Goldberg (1991), “What Every Computer Scientist Should Know About Floating-Point Arithmetic”, ACM Computing Surveys, 23/1, 5–48, also available via https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html.\nRuth Ripley’s numerical considerations notes for APTS 2013."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#uses-of-simulation",
    "href": "slides/04-sim-optim/index.html#uses-of-simulation",
    "title": "Simulation and Optimisation",
    "section": "Uses of simulation",
    "text": "Uses of simulation\n\nStatistical models are often mathematically intractable\nGenerate multiple samples for a model by simulation\nUse these samples to investigate the behaviour of the model\nNeed realisations of random variables with various different distributions, our random numbers\nDetails of how to use the random numbers to create samples will not be considered here"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#random-number-generation",
    "href": "slides/04-sim-optim/index.html#random-number-generation",
    "title": "Simulation and Optimisation",
    "section": "Random number generation",
    "text": "Random number generation\n\nRandom numbers calculated on a computer are not random.\nThey are pseudo-random, following a predicted sequence, but in the short-term (i.e. anything but the very long-term) will appear to be random.\nThis is useful, as two sets of random numbers of the same size from the same generator using the same initial value will be exactly the same. This is crucial for reproducibility.\nR provides functions for generating random samples from standard distibutions."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#random-seeds-in-r",
    "href": "slides/04-sim-optim/index.html#random-seeds-in-r",
    "title": "Simulation and Optimisation",
    "section": "Random seeds in R",
    "text": "Random seeds in R\n\nEach time a random number is required, R will use and update a variable called .Random.seed which is in your workspace.\nAt the first use, if .Random.seed does not exist, one will be created, with a value generated from the time.\nThe function set.seed(n) will set .Random.seed to a value derived from the argument n.\nUse set.seed() to repeat the same sequence of random numbers."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#random-number-generators-in-r",
    "href": "slides/04-sim-optim/index.html#random-number-generators-in-r",
    "title": "Simulation and Optimisation",
    "section": "Random number generators in R",
    "text": "Random number generators in R\n\nThere are various different generators available. R will use the one in use at the start of your session unless you alter it, even if you delete .Random.seed. For safety, you can specify the kind on calls to set.seed. Use set.seed(n, kind=\"default\") to ensure you are using R’s default.\nIt is possible to save and restore .Random.seed within your functions, but take care with scope.\nNote that random number generation changed in R version 4.0.0, so you might get different outputs even with the same seed when using versions before and after that release."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#set.seed-example",
    "href": "slides/04-sim-optim/index.html#set.seed-example",
    "title": "Simulation and Optimisation",
    "section": "set.seed() example",
    "text": "set.seed() example\n\nsample(10)\n\n [1]  2  1  7  9  8  5  4 10  3  6\n\nset.seed(1)\nsample(10)\n\n [1]  9  4  7  1  2  5  3 10  6  8\n\nsample(10)\n\n [1]  3  1  5  8  2  6 10  9  4  7\n\nset.seed(1)\nsample(10)\n\n [1]  9  4  7  1  2  5  3 10  6  8"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#sample",
    "href": "slides/04-sim-optim/index.html#sample",
    "title": "Simulation and Optimisation",
    "section": "sample()",
    "text": "sample()\nThe sample() function re-samples from a data vector, with or without replacement.\nsample(x, size, replace = FALSE, prob = NULL)\n\n\n\n\n\n\n\nx\npositive integer or a vector\n\n\nsize\nnon-negative integer, number of items to choose\n\n\nreplace\nlogical - should sampling be with replacement\n\n\nprob\na vector of probability weights for obtaining the elements of the vector being sampled."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#sample-examples",
    "href": "slides/04-sim-optim/index.html#sample-examples",
    "title": "Simulation and Optimisation",
    "section": "sample() examples",
    "text": "sample() examples\n\nsample(n)sample(x)sample(x, replace = TRUE)sample(x, size = n)sample(x, n, replace = TRUE)sample(x, n, replace = TRUE, prob = probs)\n\n\nA random permutation of 1, …, n\n\nset.seed(123)\nsample(10)\n\n [1]  3 10  2  8  6  9  1  7  5  4\n\n\nSee also sample.int():\n\nset.seed(123)\nsample.int(10)\n\n [1]  3 10  2  8  6  9  1  7  5  4\n\n\n\n\nA random permutation of x for length(x) &gt; 1\n\nset.seed(10)\nalph5 &lt;- LETTERS[1:5]\nsample(alph5)\n\n[1] \"C\" \"A\" \"B\" \"E\" \"D\"\n\n\n\n\nA bootstrap sample\n\nset.seed(10)\nsample(alph5, replace = TRUE)\n\n[1] \"C\" \"A\" \"B\" \"D\" \"C\"\n\n\n\n\nSample n items from x without replacement\n\nset.seed(10)\nsample(alph5, 3)\n\n[1] \"C\" \"A\" \"B\"\n\n\n\n\nSample n items from x with replacement\n\nset.seed(1)\nsample(alph5, 3, replace = TRUE)\n\n[1] \"A\" \"D\" \"A\"\n\n\n\n\nProbability sample of n items from x\n\nx &lt;- 1:4\nprobs &lt;- c(1/2, 1/3, 1/12, 1/12)\n\nset.seed(1)\nsamp &lt;- sample(x, 100, replace = TRUE, prob = probs)\ntable(samp)\n\nsamp\n 1  2  3  4 \n52 34 10  4"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#distributions-in-r",
    "href": "slides/04-sim-optim/index.html#distributions-in-r",
    "title": "Simulation and Optimisation",
    "section": "Distributions in R",
    "text": "Distributions in R\nMany statistical distributions are built into R. Each has a root name, e.g. norm for the normal distribution.\nThere are four functions for each distribution, with different letters prefixing the root name:\n\np for probability, the cumulative distribution function\nq for quantile, the inverse c.d.f.\nd for density, the density function, p.d.f.\nr for random, a random sample from the distribution.\n\nSo, for the normal distribution, we have the functions pnorm, qnorm, dnorm, rnorm."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#distributions-and-parameterisations",
    "href": "slides/04-sim-optim/index.html#distributions-and-parameterisations",
    "title": "Simulation and Optimisation",
    "section": "Distributions and parameterisations",
    "text": "Distributions and parameterisations\n\n\n\n\n\nDistribution\nBase name\nParameters\n\n\n\n\nbeta\nbeta\nshape1, shape2\n\n\nbinomial\nbinom\nsize, prob\n\n\nCauchy\ncauchy\nlocation, scale\n\n\nchi-squared\nchisq\ndf\n\n\nexponential\nexp\nrate\n\n\nF\nf\ndf1, df2\n\n\ngamma\ngamma\nshape, rate\n\n\ngeometric\ngeom\np\n\n\nhypergeometric\nhyper\nm, n, k\n\n\nlog-normal\nlnorm\nmeanlog, sdlog\n\n\nlogistic\nlogis\nlocation, scale\n\n\nnegative binomial\nnbinom\nsize, prob\n\n\nnormal\nnorm\nmean, sd\n\n\nPoisson\npois\nlambda\n\n\nStudent t\nt\ndf\n\n\nuniform\nunif\nmin, max\n\n\nWeibull\nweibull\nshape, scale"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#generating-random-samples-from-a-distibution",
    "href": "slides/04-sim-optim/index.html#generating-random-samples-from-a-distibution",
    "title": "Simulation and Optimisation",
    "section": "Generating random samples from a distibution",
    "text": "Generating random samples from a distibution\nTo obtain a sample of size n, use the r function for the distribution with the first argument n, and subsequent arguments the parameters for that distribution. The parameters often have default values. E.g.\n\n\n\n\n\n\n\nrunif(n, min=0, max=1)\nUniform\n\n\nrnorm(n, mean=0, sd=1)\nNormal\n\n\nrexp(n, rate=1)\nExponential with mean 1/rate\n\n\nrt(n, df)\nt with df degrees of freedom\n\n\nrbinom(n, size, prob)\nBinomial, success in size trials with probability of success prob\n\n\n\nTable from https://www.johndcook.com/blog/distributions_r_splus/"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#your-turn",
    "href": "slides/04-sim-optim/index.html#your-turn",
    "title": "Simulation and Optimisation",
    "section": "Your turn!",
    "text": "Your turn!\nSometimes sample() can lead to nasty surprises.\nConsider the following code. Which line(s) might cause a problem?\n\nx &lt;- 1:10\nsample(x[x &gt; 7])\nsample(x[x &gt; 8])\nsample(x[x &gt; 9])\nsample(x[x &gt; 10])\n\nRun the code to see what happens.\n\n\n\n\n\n\n\nWarning\n\n\nYou need to be careful when using sample() programmatically (i.e. in your function or simulation).\nSee ?sample for a safer version and check you understand how the proposed resample() function in the examples works."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#the-optimisation-problem",
    "href": "slides/04-sim-optim/index.html#the-optimisation-problem",
    "title": "Simulation and Optimisation",
    "section": "The optimisation problem",
    "text": "The optimisation problem\n\nGiven a function \\(f(x)\\), what value of \\(x\\) makes \\(f(x)\\) as small or large as possible?\nIn a statistical context, \\(x\\) will usually be the parameters of a model, and \\(f(x)\\) either the model likelihood to be maximised or some measure of discrepancy between data and predictions to be minimised\nThe optimal set of parameters will give the best fit\nOnly need to consider small as \\(-f(x)\\) is large when \\(f(x)\\) is small.\nWe consider here general-purpose optimisers"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#local-and-global-minima",
    "href": "slides/04-sim-optim/index.html#local-and-global-minima",
    "title": "Simulation and Optimisation",
    "section": "Local and global minima",
    "text": "Local and global minima\n\nThe (negative of the) likelihood for the General Linear Model (and that for many other linear models) is well-behaved: it has a single, global minimum.\nFor more complicated models there may be many local minima.\nFinding a global minimum is difficult, and not always important. Only if local minima are widely separated in parameter space are they likely to invalidate our conclusions.\nWe will concentrate on methods of finding local minima. Check for different local minima by altering the initial values, algorithm used, or other parameters of the fitting process."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#univariate-optimisation",
    "href": "slides/04-sim-optim/index.html#univariate-optimisation",
    "title": "Simulation and Optimisation",
    "section": "Univariate optimisation",
    "text": "Univariate optimisation\noptimize (or optimise) finds a (possibly local) mimimum of a function in a specified interval with respect to its first argument.\n\nFunction to be minimised is the first argument to optimize\nCan pre-specify the function or include it in the command."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#univariate-optimisation-example",
    "href": "slides/04-sim-optim/index.html#univariate-optimisation-example",
    "title": "Simulation and Optimisation",
    "section": "Univariate optimisation: example",
    "text": "Univariate optimisation: example\n\nf &lt;- function(x, a) {\n  (x - a)^2\n}\n\nxmin &lt;- optimize(f, interval = c(0, 1), a = 1/3)\n\n# or\n\nxmin &lt;- optimize(function(x, a) {(x - a)^2}, \n                 interval = c(0, 1), a = 1/3)\n\nxmin\n\n$minimum\n[1] 0.3333333\n\n$objective\n[1] 0\n\n\nNote how the (fixed) parameter a is passed into f."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#other-optimize-arguments",
    "href": "slides/04-sim-optim/index.html#other-optimize-arguments",
    "title": "Simulation and Optimisation",
    "section": "Other optimize() arguments",
    "text": "Other optimize() arguments\n\n\nAn interval within which to search must be specified, either by interval or by upper and lower\nTo maximise set maximum = TRUE\nAccuracy can be set using the tol argument\nNote the order of arguments: optimize(f, interval, ..., lower, upper, maximum, tol)\nThe ... can be named or unnamed and will be passed to f\nArguments after the ... must be specified by names.\noptimize returns a list with two items:\n\nminimum: the value of x at which f(x) is minimised\nobjective: the value of f(x) at x = minimum"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#general-optimisation",
    "href": "slides/04-sim-optim/index.html#general-optimisation",
    "title": "Simulation and Optimisation",
    "section": "General optimisation",
    "text": "General optimisation\n\nIn more than one dimension the problem is harder.\nR has several different functions: most flexible is optim() which includes several different algorithms.\nAlgorithm of choice depends on how easy it is to calculate derivatives for the function. Usually better to supply a function to calculate derivatives, but may be unnecessary extra work.\nEnsure the problem is scaled so that unit change in any parameter gives approximately unit change in objective."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#optim-methods",
    "href": "slides/04-sim-optim/index.html#optim-methods",
    "title": "Simulation and Optimisation",
    "section": "optim() methods",
    "text": "optim() methods\n\nNelder-MeadBFGSCGL-BFGS-BSANNBrent\n\n\n\nThe default method\nBasic idea: for a function with n parameters, choose a polygon with n+1 vertices. At each step, alter vertex with minimum f(x) to improve the objective function, by reflection, expansion or contraction\nDoes not use derivative information\nUseful for non-differentiable functions\nMay be rather slow\n\n\n\n\nA quasi-Newton method: builds up approximation to Hessian matrix from gradients at start and finish of steps\nUses the approximation to choose new search direction\nPerforms line search in this direction\nUpdate term for the Hessian approximation is due to Broyden, Fletcher, Goldfarb and Shanno (proposed separately by all four in 1970)\nUses derivative information, calculated either from a user-supplied function or by finite differences\nIf dimension is large, the matrix stored may be very large\n\n\n\n\nA conjugate gradient method: chooses successive search directions that are analogous to axes of an ellipse\nDoes not store a Hessian matrix\nThree different formulae for the search directions are implemented: Fletcher-Reeves, Polak-Ribiere or Beale-Sorenson\nLess robust than BFGS method\nUses derivative information, calculated either from a user-supplied function or by finite differences\n\n\n\n\nA limited memory version of BFGS\nDoes not store a Hessian matrix, only a limited number of update steps for it\nUses derivative information, calculated either from a user-supplied function or by finite differences\nCan restrict the solution to lie within a “box”, the only method of optim() that can do this\n\n\n\n\nA variant of simulated annealing A stochastic algorithm\nAccepts changes which increase the objective with positive probability (when minimising!)\nDoes not use derivative information\nCan be very slow to converge but may find a ‘good’ solution quickly\n\n\n\n\nAn interface to optimize()\nOnly for use with one dimensional problems\nIncluded for use inside other functions where only method can be specified, not the function to be used."
  },
  {
    "objectID": "slides/04-sim-optim/index.html#how-to-use-optim",
    "href": "slides/04-sim-optim/index.html#how-to-use-optim",
    "title": "Simulation and Optimisation",
    "section": "How to use optim()",
    "text": "How to use optim()\noptim(par, fn, gr=NULL, ..., method=c(\"Nelder-Mead\", \"BFGS\", \"CG\", \"L-BFGS-B\", \"SANN\", \"Brent\"), lower=-Inf, upper=Inf, control=list(), hessian=FALSE)\n\n\n\n\n\n\n\npar\nstarting values of the parameters\n\n\nfn\nfunction to be optimised (supply as for optimize)\n\n\ngr\nfunction to calculate the derivative, only relevant for methods “BFGS”, “CG” or “L-BFGS-B”\n\n\n…\nother parameters for (both) fn and gr\n\n\nmethod\nalgorithm to use\n\n\nlower, upper\nvector of limits for parameters (only allowed it method=\"L-BFGS-B\"\n\n\ncontrol\ncontrol options (see next slide)\n\n\nhessian\nlogical: whether to return a hessian estimate calculated by finite differences"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#optim-control-options",
    "href": "slides/04-sim-optim/index.html#optim-control-options",
    "title": "Simulation and Optimisation",
    "section": "optim(): control options",
    "text": "optim(): control options\nThere are very many. The most important are:\n\n\n\n\n\n\n\ntrace\nA positive integer: higher values give more information\n\n\nfnscale\nAn overall scaling: if negative, maximisation will be performed\n\n\nparscale\nA vector of scalings for the parameters\n\n\nmaxit\nMaximum number of iterations to be performed. May be used to terminate unsuccessful attempts. Also used to perform one or two steps if convergence is unimportant\n\n\ntype\nUsed to select formula for “CG” method"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#optim-components-of-return-value",
    "href": "slides/04-sim-optim/index.html#optim-components-of-return-value",
    "title": "Simulation and Optimisation",
    "section": "optim(): components of return value",
    "text": "optim(): components of return value\n\n\n\n\n\n\n\npar\nbest set of parameters\n\n\nvalue\nvalue of fn corresponding to par\n\n\ncounts\nnumber of calls to fn and gr: excludes calls for purposes of approximating derivatives or Hessian\n\n\nconvergence\nerror code: 0=success, 1=maxit reached, 10=degeneracy of Nelder-Mead simplex, 51=warning from “L-BFGS-B”, 52=error from “L-BFGS-B”\n\n\nmessage\nfurther information, if any\n\n\nhessian\nif requested, a symmetric matrix estimate of the Hessian at the solution"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#your-turn-q1",
    "href": "slides/04-sim-optim/index.html#your-turn-q1",
    "title": "Simulation and Optimisation",
    "section": "Your turn! Q1",
    "text": "Your turn! Q1\n\nfw &lt;- function (x) {\n    10*sin(0.3*x)*sin(1.3*x^2) + 0.00001*x^4 + 0.2*x+80\n}\n\n\n\nUse optim() to find an approximate global minimum\nUse optim() again to improve locally (aiming for an objective of 67.46773).\n\n\nthis occurs when $minimum x = -15.81515"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#your-turn-q2",
    "href": "slides/04-sim-optim/index.html#your-turn-q2",
    "title": "Simulation and Optimisation",
    "section": "Your turn! Q2",
    "text": "Your turn! Q2\n\nTake a look at the introduction to the Wikipedia page for Rosenbrock’s banana function\nCopy this code for the fn and gr\n\n\nfn &lt;- function(x) {   \n    x1 &lt;- x[1]\n    x2 &lt;- x[2]\n    100 * (x2 - x1 * x1)^2 + (1 - x1)^2\n}\n\ngr &lt;- function(x) { \n    x1 &lt;- x[1]\n    x2 &lt;- x[2]\n    c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),\n       200 *      (x2 - x1 * x1))\n}\n\n\nUsing a start value of c(0, 0), experiment with the optim() function to see which methods converge"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#resources",
    "href": "slides/04-sim-optim/index.html#resources",
    "title": "Simulation and Optimisation",
    "section": "Resources",
    "text": "Resources\nThis material is reproduced in large part directly from the APTS 2013/14 resources by Ruth Ripley:\n\nhttps://portal.stats.ox.ac.uk/userdata/ruth/APTS2013/Rcourse5.pdf"
  },
  {
    "objectID": "slides/04-sim-optim/index.html#license",
    "href": "slides/04-sim-optim/index.html#license",
    "title": "Simulation and Optimisation",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Getting set up",
    "section": "",
    "text": "Please ensure that you have the latest versions of R and RStudio installed prior to the first session. Currently, that’s R-4.5.1 and RStudio-2025.09.0.\nWe also strongly recommend you install the development tools to avoid potential issues installing packages."
  },
  {
    "objectID": "prerequisites.html#installing-r",
    "href": "prerequisites.html#installing-r",
    "title": "Getting set up",
    "section": "Installing R",
    "text": "Installing R\nDownload the pre-compiled binary for your OS from https://cloud.r-project.org/ and install. More specifically:\nFor Windows with admin rights\nClick “Download R for Windows”, then “base”, then “Download R-4.5.1 for Windows”. This will download an .exe file; once downloaded, open to start the installation.\nFor Windows with no admin rights\nDownload the .zip source archive under “Zip/Tarballs”. Extract the files to a folder where you have write access, e.g. C:\\Users\\username\\RStudio. In this folder, open the bin directory and find the RStudio program: it is named rstudio.exe, but the file extension will typically be hidden, so look for rstudio. Right-click this executable to create a desktop shortcut. Double-click the executable or use the shortcut to open.\nFor Mac\nClick “Download R for macOS”, then “R-4.5.1-arm64.pkg” (the first option) to download the installer for Macs with Apple Silicon chips or “R-4.5.1-x86_64.pkg” (the second option) to download the installer for Macs with Intel chips. Run the installer to complete installation.\nFor Linux\nClick “Download R for Linux”. Instructions on installing are given for Debian, Fedora, Redhat, Suse and Ubuntu distributions. Where there is a choice, install both r-base and r-base-dev.\nFor all other operating systems\nDownload the relevant installer for your OS listed under “Installers for Supported Platforms”. Run the installer to complete installation."
  },
  {
    "objectID": "prerequisites.html#installing-r-studio-desktop-open-source-edition",
    "href": "prerequisites.html#installing-r-studio-desktop-open-source-edition",
    "title": "Getting set up",
    "section": "Installing R Studio Desktop (Open Source Edition)",
    "text": "Installing R Studio Desktop (Open Source Edition)\nDownloads are available from https://posit.co/download/rstudio-desktop/\nDownload the relevant installer either under the “Install RStudio” header or, scrolling down the page, from the ‘All installers and Tarballs’ section. Run the installer to complete installation."
  },
  {
    "objectID": "prerequisites.html#development-tools",
    "href": "prerequisites.html#development-tools",
    "title": "Getting set up",
    "section": "Development Tools",
    "text": "Development Tools\nSome additional tools may be required to compile R packages from source.\nFor Windows with admin rights\nDownload the latest Rtools installer, Rtools.exe, from https://cran.r-project.org/bin/windows/Rtools/. Run the installer making the following selections: keep the default settings for the installation location and components to install; check the box to add rtools to the system PATH.\nFor Windows with no admin rights\nDownload the latest (recommended) Rtools installer, Rtools.exe, from https://cran.r-project.org/bin/windows/Rtools/. Run the installer keeping the default settings.\nFor Mac\nEither install XCode:\n\nDownload and install XCode from the Mac AppStore: http://itunes.apple.com/us/app/xcode/id497799835?mt=12\nWithin XCode go to Preferences : Downloads and install the Command Line Tools\n\nOr for a smaller download size:\n\nRegister as an Apple Developer (free) here: https://developer.apple.com/programs/enroll/\nDownload the Command Line Tools for XCode appropriate for the version of OS X you are running from here: https://developer.apple.com/downloads/\n\nFor Linux\nIf you installed r-base-dev, when installing R, you should have all you need to build packages from source. Otherwise return to the instructions for installing R for your distribution and follow the instructions there to install the additional tools."
  },
  {
    "objectID": "content/05-graphics/index.html",
    "href": "content/05-graphics/index.html",
    "title": "Graphics",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/05-graphics/index.html#slides",
    "href": "content/05-graphics/index.html#slides",
    "title": "Graphics",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/05-graphics/index.html#resources",
    "href": "content/05-graphics/index.html#resources",
    "title": "Graphics",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nggplot2: Elegant Graphics for Data Analysis (for an in-depth understanding)\nR for Data Science book: Chapters 3: Data Visualisation and 28: Graphics for Communication, to get up and running quickly\nPlotting anything with ggplot2 webinar with Thomas Lin Pederson (one of the main ggplot2 authors)\nR graphics cookbook, a practical guide that provides more than 150 recipes to help you generate high-quality graphs quickly\nCedric Scherer’s tutorial\nCedric Scherer’s ‘Engaging and Beautiful Data Visualizations with ggplot2’ workshop\nggplot2 reference\n\n\n\nPackages\n\nggplot2\nhttps://ggplot2.tidyverse.org\ngt\nhttps://gt.rstudio.com\ngtsummary\nhttps://www.danieldsjoberg.com/gtsummary/"
  },
  {
    "objectID": "content/01-intro/index.html",
    "href": "content/01-intro/index.html",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-intro/index.html#slides",
    "href": "content/01-intro/index.html#slides",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-intro/index.html#resources",
    "href": "content/01-intro/index.html#resources",
    "title": "Introduction to R and RStudio",
    "section": "Resources",
    "text": "Resources\n\nR and RStudio\n\nRStudio IDE cheatsheet\nhttps://rstudio.github.io/cheatsheets/html/rstudio-ide.html\nBeginner resources from the RStudio Education team\nhttps://education.rstudio.com/learn/beginner/\nIntroduction to R and RStudio from the Carpentries\nhttps://carpentries-incubator.github.io/r-tidyverse-4-datasets/01-project-introduction.html\n\n\n\nPackages\n\ntidyverse\nhttps://www.tidyverse.org\npalmerpenguins\nhttps://allisonhorst.github.io/palmerpenguins/index.html"
  },
  {
    "objectID": "content/03-programming/index.html",
    "href": "content/03-programming/index.html",
    "title": "Programming in R",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/03-programming/index.html#slides",
    "href": "content/03-programming/index.html#slides",
    "title": "Programming in R",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/03-programming/index.html#resources",
    "href": "content/03-programming/index.html#resources",
    "title": "Programming in R",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nEfficient Programming, from Efficient R by Colin Gillespie and Robin Lovelace\nhttps://csgillespie.github.io/efficientR/programming.html\nChapters on functions and iteration, from R for Data Science by Hadley Wickham and Garrett Grolemund\nhttps://r4ds.had.co.nz/index.html\nhttps://r4ds.had.co.nz/functions.html\nhttps://r4ds.had.co.nz/iteration.html"
  }
]